// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_16d41c6fc5b8bf5d
#define INCLUDED_16d41c6fc5b8bf5d
#include "maglev/MagLev.h"
#endif
#ifndef INCLUDED_englishauction_EnglishAuction
#include <englishauction/EnglishAuction.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f704f8914f7b4676_14_new,"englishauction.EnglishAuction","new",0x16125e00,"englishauction.EnglishAuction.new","englishauction/EnglishAuction.hx",14,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_20_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",20,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_11_boot,"englishauction.EnglishAuction","boot",0x3218e292,"englishauction.EnglishAuction.boot","englishauction/EnglishAuction.hx",11,0xd6cb504f)
namespace englishauction{

void EnglishAuction_obj::__construct( ::maglev::MagLev maglev){
            	HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_14_new)
HXLINE(  15)		this->maglev = maglev;
HXLINE(  16)		this->registerMyMethods();
            	}

Dynamic EnglishAuction_obj::__CreateEmpty() { return new EnglishAuction_obj; }

void *EnglishAuction_obj::_hx_vtable = 0;

Dynamic EnglishAuction_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< EnglishAuction_obj > _hx_result = new EnglishAuction_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool EnglishAuction_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x55949a6e;
}

void EnglishAuction_obj::registerMyMethods(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		 ::Dynamic _hx_run(::cpp::VirtualArray args){
            			HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_20_registerMyMethods)
HXLINE(  21)			::String ret = HX_("idhere",4b,1d,96,d4);
HXLINE(  22)			return ret;
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_20_registerMyMethods)
HXDLIN(  20)		this->maglev->_hx_register(HX_("EnglishAuction.Create",17,3d,e9,16), ::Dynamic(new _hx_Closure_0()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(EnglishAuction_obj,registerMyMethods,(void))


::hx::ObjectPtr< EnglishAuction_obj > EnglishAuction_obj::__new( ::maglev::MagLev maglev) {
	::hx::ObjectPtr< EnglishAuction_obj > __this = new EnglishAuction_obj();
	__this->__construct(maglev);
	return __this;
}

::hx::ObjectPtr< EnglishAuction_obj > EnglishAuction_obj::__alloc(::hx::Ctx *_hx_ctx, ::maglev::MagLev maglev) {
	EnglishAuction_obj *__this = (EnglishAuction_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(EnglishAuction_obj), true, "englishauction.EnglishAuction"));
	*(void **)__this = EnglishAuction_obj::_hx_vtable;
	__this->__construct(maglev);
	return __this;
}

EnglishAuction_obj::EnglishAuction_obj()
{
}

void EnglishAuction_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(EnglishAuction);
	HX_MARK_MEMBER_NAME(maglev,"maglev");
	HX_MARK_END_CLASS();
}

void EnglishAuction_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(maglev,"maglev");
}

::hx::Val EnglishAuction_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"maglev") ) { return ::hx::Val( maglev ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"registerMyMethods") ) { return ::hx::Val( registerMyMethods_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val EnglishAuction_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"maglev") ) { maglev=inValue.Cast<  ::maglev::MagLev >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void EnglishAuction_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("maglev",2a,df,2b,b3));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo EnglishAuction_obj_sMemberStorageInfo[] = {
	{::hx::fsUnknown /*  ::maglev::MagLev */ ,(int)offsetof(EnglishAuction_obj,maglev),HX_("maglev",2a,df,2b,b3)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *EnglishAuction_obj_sStaticStorageInfo = 0;
#endif

static ::String EnglishAuction_obj_sMemberFields[] = {
	HX_("maglev",2a,df,2b,b3),
	HX_("registerMyMethods",83,b1,0a,b9),
	::String(null()) };

::hx::Class EnglishAuction_obj::__mClass;

void EnglishAuction_obj::__register()
{
	EnglishAuction_obj _hx_dummy;
	EnglishAuction_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("englishauction.EnglishAuction",0e,9e,93,52);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(EnglishAuction_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< EnglishAuction_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EnglishAuction_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EnglishAuction_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void EnglishAuction_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_11_boot)
HXDLIN(  11)		__mClass->__meta__ =  ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("obj",f7,8f,54,00), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,::cpp::VirtualArray_obj::__new(4)->init(0,HX_("checkstyle:FieldDocComment",70,56,1b,20))->init(1,HX_("checkstyle:LocalVariableName",c1,ac,a3,03))->init(2,HX_("checkstyle:MultipleStringLiterals",d6,ed,13,79))->init(3,HX_("checkstyle:MagicNumber",a5,aa,f4,8b)))))));
            	}
}

} // end namespace englishauction
