// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_16d41c6fc5b8bf5d
#define INCLUDED_16d41c6fc5b8bf5d
#include "maglev/MagLev.h"
#endif
#ifndef INCLUDED_869a921fcf5bba54
#define INCLUDED_869a921fcf5bba54
#include "maglev/MagLevAny.h"
#endif
#ifndef INCLUDED_20db69a30a45e926
#define INCLUDED_20db69a30a45e926
#include "maglev/MagLevArray.h"
#endif
#ifndef INCLUDED_35ec03520fbb0747
#define INCLUDED_35ec03520fbb0747
#include "maglev/MagLevBoolean.h"
#endif
#ifndef INCLUDED_d8a74f90a5c0b964
#define INCLUDED_d8a74f90a5c0b964
#include "maglev/MagLevError.h"
#endif
#ifndef INCLUDED_7f9204b932c8d809
#define INCLUDED_7f9204b932c8d809
#include "maglev/MagLevFunction.h"
#endif
#ifndef INCLUDED_ba46386e6aba7150
#define INCLUDED_ba46386e6aba7150
#include "maglev/MagLevNull.h"
#endif
#ifndef INCLUDED_95fa5e9194badcf5
#define INCLUDED_95fa5e9194badcf5
#include "maglev/MagLevNumber.h"
#endif
#ifndef INCLUDED_f4da16f85a617f60
#define INCLUDED_f4da16f85a617f60
#include "maglev/MagLevObject.h"
#endif
#ifndef INCLUDED_65acb6100057af6e
#define INCLUDED_65acb6100057af6e
#include "maglev/MagLevResult.h"
#endif
#ifndef INCLUDED_c859d2752ef86c43
#define INCLUDED_c859d2752ef86c43
#include "maglev/MagLevString.h"
#endif
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_englishauction_AuctionModel
#include <englishauction/AuctionModel.h>
#endif
#ifndef INCLUDED_englishauction_AuctionRepository
#include <englishauction/AuctionRepository.h>
#endif
#ifndef INCLUDED_englishauction_BidModel
#include <englishauction/BidModel.h>
#endif
#ifndef INCLUDED_englishauction_BidRepository
#include <englishauction/BidRepository.h>
#endif
#ifndef INCLUDED_englishauction_EnglishAuction
#include <englishauction/EnglishAuction.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f704f8914f7b4676_16_new,"englishauction.EnglishAuction","new",0x16125e00,"englishauction.EnglishAuction.new","englishauction/EnglishAuction.hx",16,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_35_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",35,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_25_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",25,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_39_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",39,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_64_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",64,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_89_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",89,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_115_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",115,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_141_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",141,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_158_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",158,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_187_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",187,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_219_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",219,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_228_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",228,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_224_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",224,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_243_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",243,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_239_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",239,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_258_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",258,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_254_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",254,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_273_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",273,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_269_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",269,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_288_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",288,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_284_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",284,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_316_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",316,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_308_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",308,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_346_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",346,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_332_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",332,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_370_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",370,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_356_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",356,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_392_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",392,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_380_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",380,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_23_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",23,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_411_auctionModelToMagLevObject,"englishauction.EnglishAuction","auctionModelToMagLevObject",0x1c14daea,"englishauction.EnglishAuction.auctionModelToMagLevObject","englishauction/EnglishAuction.hx",411,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_423_convertToHaxe,"englishauction.EnglishAuction","convertToHaxe",0xb16f5f34,"englishauction.EnglishAuction.convertToHaxe","englishauction/EnglishAuction.hx",423,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_464_convertToMagLev,"englishauction.EnglishAuction","convertToMagLev",0x67e62198,"englishauction.EnglishAuction.convertToMagLev","englishauction/EnglishAuction.hx",464,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_11_boot,"englishauction.EnglishAuction","boot",0x3218e292,"englishauction.EnglishAuction.boot","englishauction/EnglishAuction.hx",11,0xd6cb504f)
namespace englishauction{

void EnglishAuction_obj::__construct( ::maglev::MagLev maglev){
            	HX_GC_STACKFRAME(&_hx_pos_f704f8914f7b4676_16_new)
HXLINE(  17)		this->maglev = maglev;
HXLINE(  18)		this->auctionRepo =  ::englishauction::AuctionRepository_obj::__alloc( HX_CTX ,maglev);
HXLINE(  19)		this->bidRepo =  ::englishauction::BidRepository_obj::__alloc( HX_CTX ,maglev);
HXLINE(  20)		this->registerMyMethods();
            	}

Dynamic EnglishAuction_obj::__CreateEmpty() { return new EnglishAuction_obj; }

void *EnglishAuction_obj::_hx_vtable = 0;

Dynamic EnglishAuction_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< EnglishAuction_obj > _hx_result = new EnglishAuction_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool EnglishAuction_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x55949a6e;
}

void EnglishAuction_obj::registerMyMethods(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::englishauction::EnglishAuction,_gthis) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::maglev::MagLevResult,result) HXARGC(1)
            			void _hx_run(::String id){
            				HX_GC_STACKFRAME(&_hx_pos_f704f8914f7b4676_35_registerMyMethods)
HXLINE(  35)				 ::maglev::MagLevResult result1 = result;
HXDLIN(  35)				result1->setResult(::maglev::MagLevString_obj::fromString(id));
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_GC_STACKFRAME(&_hx_pos_f704f8914f7b4676_25_registerMyMethods)
HXLINE(  27)			 ::englishauction::AuctionModel model =  ::englishauction::AuctionModel_obj::__alloc( HX_CTX );
HXLINE(  28)			model->start = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(0))->getInt();
HXLINE(  29)			model->end = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(1))->getInt();
HXLINE(  30)			model->startingPrice = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(2))->getFloat();
HXLINE(  31)			model->reservePrice = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(3))->getFloat();
HXLINE(  32)			model->priceIncrement = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(4))->getFloat();
HXLINE(  33)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::createAsync();
HXLINE(  34)			_gthis->auctionRepo->Add(model, ::Dynamic(new _hx_Closure_0(result)));
HXLINE(  37)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::maglev::MagLev,bus) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_39_registerMyMethods)
HXLINE(  40)			 ::maglev::MagLevString id = ::hx::TCast<  ::maglev::MagLevString >::cast(args->get(0));
HXLINE(  41)			 ::maglev::MagLevArray myargs = ::maglev::MagLevArray_obj::create();
HXLINE(  42)			myargs->push(::maglev::MagLevString_obj::fromString(HX_("EnglishAuction.Auction",c8,f3,cc,ba)));
HXLINE(  43)			myargs->push(::maglev::MagLevString_obj::fromString(HX_("FindById",8b,c2,68,6d)));
HXLINE(  44)			 ::maglev::MagLevArray myarr = ::maglev::MagLevArray_obj::create();
HXLINE(  45)			myarr->push(id);
HXLINE(  46)			myargs->push(myarr);
HXLINE(  47)			 ::maglev::MagLevResult res = bus->call(HX_("Persistence.Get",c7,c3,56,12),myargs);
HXLINE(  48)			if (res->isError()) {
HXLINE(  48)				return res;
            			}
HXLINE(  49)			 ::maglev::MagLevObject resobj = ( ( ::maglev::MagLevObject)(res->getResult()) );
HXLINE(  50)			Float start = ( (Float)(0) );
HXLINE(  51)			if (::Std_obj::isOfType(resobj->get(HX_("start",62,74,0b,84)),( ( ::Dynamic)(::hx::ClassOf< ::maglev::MagLevString >()) ))) {
HXLINE(  52)				 ::maglev::MagLevString y = ::hx::TCast<  ::maglev::MagLevString >::cast(resobj->get(HX_("start",62,74,0b,84)));
HXLINE(  53)				start = ::Date_obj::fromString(y->getString())->getTime();
            			}
            			else {
HXLINE(  54)				if (::Std_obj::isOfType(resobj->get(HX_("start",62,74,0b,84)),( ( ::Dynamic)(::hx::ClassOf< ::maglev::MagLevNumber >()) ))) {
HXLINE(  55)					 ::maglev::MagLevNumber y = ::hx::TCast<  ::maglev::MagLevNumber >::cast(resobj->get(HX_("start",62,74,0b,84)));
HXLINE(  56)					start = y->getFloat();
            				}
            				else {
HXLINE(  58)					 ::maglev::MagLevError error = ::maglev::MagLevError_obj::create(0,HX_("persistence getter did not return object with start as number or string",a0,2c,5d,68),::maglev::MagLevNull_obj::create());
HXLINE(  59)					return ::maglev::MagLevResult_obj::fromError(error);
            				}
            			}
HXLINE(  61)			Float result = start;
HXLINE(  62)			return ::maglev::MagLevResult_obj::fromResult(::maglev::MagLevNumber_obj::fromFloat(result));
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::maglev::MagLev,bus) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_64_registerMyMethods)
HXLINE(  65)			 ::maglev::MagLevString id = ::hx::TCast<  ::maglev::MagLevString >::cast(args->get(0));
HXLINE(  66)			 ::maglev::MagLevArray myargs = ::maglev::MagLevArray_obj::create();
HXLINE(  67)			myargs->push(::maglev::MagLevString_obj::fromString(HX_("EnglishAuction.Auction",c8,f3,cc,ba)));
HXLINE(  68)			myargs->push(::maglev::MagLevString_obj::fromString(HX_("FindById",8b,c2,68,6d)));
HXLINE(  69)			 ::maglev::MagLevArray myarr = ::maglev::MagLevArray_obj::create();
HXLINE(  70)			myarr->push(id);
HXLINE(  71)			myargs->push(myarr);
HXLINE(  72)			 ::maglev::MagLevResult res = bus->call(HX_("Persistence.Get",c7,c3,56,12),myargs);
HXLINE(  73)			if (res->isError()) {
HXLINE(  73)				return res;
            			}
HXLINE(  74)			 ::maglev::MagLevObject resobj = ( ( ::maglev::MagLevObject)(res->getResult()) );
HXLINE(  75)			Float end = ( (Float)(0) );
HXLINE(  76)			if (::Std_obj::isOfType(resobj->get(HX_("end",db,03,4d,00)),( ( ::Dynamic)(::hx::ClassOf< ::maglev::MagLevString >()) ))) {
HXLINE(  77)				 ::maglev::MagLevString y = ::hx::TCast<  ::maglev::MagLevString >::cast(resobj->get(HX_("end",db,03,4d,00)));
HXLINE(  78)				end = ::Date_obj::fromString(y->getString())->getTime();
            			}
            			else {
HXLINE(  79)				if (::Std_obj::isOfType(resobj->get(HX_("end",db,03,4d,00)),( ( ::Dynamic)(::hx::ClassOf< ::maglev::MagLevNumber >()) ))) {
HXLINE(  80)					 ::maglev::MagLevNumber y = ::hx::TCast<  ::maglev::MagLevNumber >::cast(resobj->get(HX_("end",db,03,4d,00)));
HXLINE(  81)					end = y->getFloat();
            				}
            				else {
HXLINE(  83)					 ::maglev::MagLevError error = ::maglev::MagLevError_obj::create(0,HX_("persistence getter did not return object with end as number or string",59,36,24,34),::maglev::MagLevNull_obj::create());
HXLINE(  84)					return ::maglev::MagLevResult_obj::fromError(error);
            				}
            			}
HXLINE(  86)			Float result = end;
HXLINE(  87)			return ::maglev::MagLevResult_obj::fromResult(::maglev::MagLevNumber_obj::fromFloat(result));
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::maglev::MagLev,bus) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_89_registerMyMethods)
HXLINE(  90)			 ::maglev::MagLevString id = ::hx::TCast<  ::maglev::MagLevString >::cast(args->get(0));
HXLINE(  91)			 ::maglev::MagLevArray myargs = ::maglev::MagLevArray_obj::create();
HXLINE(  92)			myargs->push(::maglev::MagLevString_obj::fromString(HX_("EnglishAuction.Auction",c8,f3,cc,ba)));
HXLINE(  93)			myargs->push(::maglev::MagLevString_obj::fromString(HX_("FindById",8b,c2,68,6d)));
HXLINE(  94)			 ::maglev::MagLevArray myarr = ::maglev::MagLevArray_obj::create();
HXLINE(  95)			myarr->push(id);
HXLINE(  96)			myargs->push(myarr);
HXLINE(  97)			 ::maglev::MagLevResult res = bus->call(HX_("Persistence.Get",c7,c3,56,12),myargs);
HXLINE(  98)			if (res->isError()) {
HXLINE(  98)				return res;
            			}
HXLINE(  99)			 ::maglev::MagLevObject resobj = ( ( ::maglev::MagLevObject)(res->getResult()) );
HXLINE( 100)			Float start = ( (Float)(0) );
HXLINE( 101)			if (::Std_obj::isOfType(resobj->get(HX_("start",62,74,0b,84)),( ( ::Dynamic)(::hx::ClassOf< ::maglev::MagLevString >()) ))) {
HXLINE( 102)				 ::maglev::MagLevString y = ::hx::TCast<  ::maglev::MagLevString >::cast(resobj->get(HX_("start",62,74,0b,84)));
HXLINE( 103)				start = ::Date_obj::fromString(y->getString())->getTime();
            			}
            			else {
HXLINE( 104)				if (::Std_obj::isOfType(resobj->get(HX_("start",62,74,0b,84)),( ( ::Dynamic)(::hx::ClassOf< ::maglev::MagLevNumber >()) ))) {
HXLINE( 105)					 ::maglev::MagLevNumber y = ::hx::TCast<  ::maglev::MagLevNumber >::cast(resobj->get(HX_("start",62,74,0b,84)));
HXLINE( 106)					start = y->getFloat();
            				}
            				else {
HXLINE( 108)					 ::maglev::MagLevError error = ::maglev::MagLevError_obj::create(0,HX_("persistence getter did not return object with start as number or string",a0,2c,5d,68),::maglev::MagLevNull_obj::create());
HXLINE( 109)					return ::maglev::MagLevResult_obj::fromError(error);
            				}
            			}
HXLINE( 111)			Float now = ::Date_obj::now()->getTime();
HXLINE( 112)			bool result = (start <= now);
HXLINE( 113)			return ::maglev::MagLevResult_obj::fromResult(::maglev::MagLevBoolean_obj::fromBool(result));
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_5, ::maglev::MagLev,bus) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_115_registerMyMethods)
HXLINE( 116)			 ::maglev::MagLevString id = ::hx::TCast<  ::maglev::MagLevString >::cast(args->get(0));
HXLINE( 117)			 ::maglev::MagLevArray myargs = ::maglev::MagLevArray_obj::create();
HXLINE( 118)			myargs->push(::maglev::MagLevString_obj::fromString(HX_("EnglishAuction.Auction",c8,f3,cc,ba)));
HXLINE( 119)			myargs->push(::maglev::MagLevString_obj::fromString(HX_("FindById",8b,c2,68,6d)));
HXLINE( 120)			 ::maglev::MagLevArray myarr = ::maglev::MagLevArray_obj::create();
HXLINE( 121)			myarr->push(id);
HXLINE( 122)			myargs->push(myarr);
HXLINE( 123)			 ::maglev::MagLevResult res = bus->call(HX_("Persistence.Get",c7,c3,56,12),myargs);
HXLINE( 124)			if (res->isError()) {
HXLINE( 124)				return res;
            			}
HXLINE( 125)			 ::maglev::MagLevObject resobj = ( ( ::maglev::MagLevObject)(res->getResult()) );
HXLINE( 126)			Float end = ( (Float)(0) );
HXLINE( 127)			if (::Std_obj::isOfType(resobj->get(HX_("end",db,03,4d,00)),( ( ::Dynamic)(::hx::ClassOf< ::maglev::MagLevString >()) ))) {
HXLINE( 128)				 ::maglev::MagLevString y = ::hx::TCast<  ::maglev::MagLevString >::cast(resobj->get(HX_("end",db,03,4d,00)));
HXLINE( 129)				end = ::Date_obj::fromString(y->getString())->getTime();
            			}
            			else {
HXLINE( 130)				if (::Std_obj::isOfType(resobj->get(HX_("end",db,03,4d,00)),( ( ::Dynamic)(::hx::ClassOf< ::maglev::MagLevNumber >()) ))) {
HXLINE( 131)					 ::maglev::MagLevNumber y = ::hx::TCast<  ::maglev::MagLevNumber >::cast(resobj->get(HX_("end",db,03,4d,00)));
HXLINE( 132)					end = y->getFloat();
            				}
            				else {
HXLINE( 134)					 ::maglev::MagLevError error = ::maglev::MagLevError_obj::create(0,HX_("persistence getter did not return object with end as number or string",59,36,24,34),::maglev::MagLevNull_obj::create());
HXLINE( 135)					return ::maglev::MagLevResult_obj::fromError(error);
            				}
            			}
HXLINE( 137)			Float now = ::Date_obj::now()->getTime();
HXLINE( 138)			bool result = (now > end);
HXLINE( 139)			return ::maglev::MagLevResult_obj::fromResult(::maglev::MagLevBoolean_obj::fromBool(result));
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_6, ::maglev::MagLev,bus) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_141_registerMyMethods)
HXLINE( 142)			 ::maglev::MagLevString auctionId = ::hx::TCast<  ::maglev::MagLevString >::cast(args->get(0));
HXLINE( 143)			 ::maglev::MagLevString userId = ::hx::TCast<  ::maglev::MagLevString >::cast(args->get(1));
HXLINE( 144)			 ::maglev::MagLevNumber price = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(2));
HXLINE( 145)			 ::maglev::MagLevObject data = ::maglev::MagLevObject_obj::create();
HXLINE( 146)			data->set(HX_("auctionId",fe,08,7f,46),auctionId);
HXLINE( 147)			data->set(HX_("userId",06,3b,ef,41),userId);
HXLINE( 148)			data->set(HX_("price",89,4e,8b,c8),price);
HXLINE( 149)			 ::maglev::MagLevArray args1 = ::maglev::MagLevArray_obj::create();
HXLINE( 150)			args1->push(::maglev::MagLevString_obj::fromString(HX_("EnglishAuction.Bid",c2,d3,e1,19)));
HXLINE( 151)			args1->push(::maglev::MagLevString_obj::fromString(HX_("New",40,88,3b,00)));
HXLINE( 152)			 ::maglev::MagLevArray arr = ::maglev::MagLevArray_obj::create();
HXLINE( 153)			arr->push(data);
HXLINE( 154)			args1->push(arr);
HXLINE( 155)			bus->call(HX_("Persistence.Mutate",f5,04,66,8c),args1);
HXLINE( 156)			return ::maglev::MagLevResult_obj::fromResult(::maglev::MagLevBoolean_obj::fromBool(true));
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_7, ::maglev::MagLev,bus) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_158_registerMyMethods)
HXLINE( 159)			 ::maglev::MagLevString auctionId = ::hx::TCast<  ::maglev::MagLevString >::cast(args->get(0));
HXLINE( 160)			 ::maglev::MagLevArray myargs = ::maglev::MagLevArray_obj::create();
HXLINE( 161)			myargs->push(auctionId);
HXLINE( 162)			myargs->push(::maglev::MagLevNumber_obj::fromInt(1));
HXLINE( 163)			 ::maglev::MagLevArray myargs2 = ::maglev::MagLevArray_obj::create();
HXLINE( 164)			myargs2->push(::maglev::MagLevString_obj::fromString(HX_("EnglishAuction.Bid",c2,d3,e1,19)));
HXLINE( 165)			myargs2->push(::maglev::MagLevString_obj::fromString(HX_("FindByHighestPriceForAuction",0f,c3,2f,00)));
HXLINE( 166)			myargs2->push(myargs);
HXLINE( 167)			 ::maglev::MagLevResult ret = bus->call(HX_("Persistence.Get",c7,c3,56,12),myargs2);
HXLINE( 168)			if (ret->isError()) {
HXLINE( 168)				return ret;
            			}
HXLINE( 169)			 ::maglev::MagLevAny res = ret->getResult();
HXLINE( 170)			if (::Std_obj::isOfType(res,( ( ::Dynamic)(::hx::ClassOf< ::maglev::MagLevArray >()) ))) {
HXLINE( 171)				 ::maglev::MagLevArray resarr = ::hx::TCast<  ::maglev::MagLevArray >::cast(res);
HXLINE( 172)				if ((resarr->size() > 0)) {
HXLINE( 173)					 ::maglev::MagLevObject row = ( ( ::maglev::MagLevObject)(resarr->get(0)) );
HXLINE( 174)					 ::maglev::MagLevObject row2 = ::maglev::MagLevObject_obj::create();
HXLINE( 175)					row2->set(HX_("userId",06,3b,ef,41),row->get(HX_("userId",06,3b,ef,41)));
HXLINE( 176)					row2->set(HX_("price",89,4e,8b,c8),row->get(HX_("price",89,4e,8b,c8)));
HXLINE( 177)					return ::maglev::MagLevResult_obj::fromResult(row2);
            				}
            				else {
HXLINE( 179)					return ::maglev::MagLevResult_obj::fromResult(::maglev::MagLevNull_obj::create());
            				}
            			}
            			else {
HXLINE( 183)				 ::maglev::MagLevError error = ::maglev::MagLevError_obj::create(0,HX_("persistence getter did not return array",4b,24,e2,1e),::maglev::MagLevNull_obj::create());
HXLINE( 184)				return ::maglev::MagLevResult_obj::fromError(error);
            			}
HXLINE( 170)			return null();
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_8, ::maglev::MagLev,bus) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_187_registerMyMethods)
HXLINE( 188)			 ::maglev::MagLevString auctionId = ::hx::TCast<  ::maglev::MagLevString >::cast(args->get(0));
HXLINE( 189)			 ::maglev::MagLevNumber numBids = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(1));
HXLINE( 190)			 ::maglev::MagLevArray myargs = ::maglev::MagLevArray_obj::create();
HXLINE( 191)			myargs->push(auctionId);
HXLINE( 192)			myargs->push(numBids);
HXLINE( 193)			 ::maglev::MagLevArray myargs2 = ::maglev::MagLevArray_obj::create();
HXLINE( 194)			myargs2->push(::maglev::MagLevString_obj::fromString(HX_("EnglishAuction.Bid",c2,d3,e1,19)));
HXLINE( 195)			myargs2->push(::maglev::MagLevString_obj::fromString(HX_("FindByHighestPriceForAuction",0f,c3,2f,00)));
HXLINE( 196)			myargs2->push(myargs);
HXLINE( 197)			 ::maglev::MagLevResult ret = bus->call(HX_("Persistence.Get",c7,c3,56,12),myargs2);
HXLINE( 198)			if (ret->isError()) {
HXLINE( 198)				return ret;
            			}
HXLINE( 199)			 ::maglev::MagLevAny res = ret->getResult();
HXLINE( 200)			 ::maglev::MagLevArray bids = ::maglev::MagLevArray_obj::create();
HXLINE( 201)			if (::Std_obj::isOfType(res,( ( ::Dynamic)(::hx::ClassOf< ::maglev::MagLevArray >()) ))) {
HXLINE( 202)				 ::maglev::MagLevArray resarr = ::hx::TCast<  ::maglev::MagLevArray >::cast(res);
HXLINE( 203)				int i = 0;
HXLINE( 204)				while((i < resarr->size())){
HXLINE( 205)					 ::maglev::MagLevObject row = ( ( ::maglev::MagLevObject)(resarr->get(i)) );
HXLINE( 206)					 ::maglev::MagLevObject row2 = ::maglev::MagLevObject_obj::create();
HXLINE( 207)					row2->set(HX_("userId",06,3b,ef,41),row->get(HX_("userId",06,3b,ef,41)));
HXLINE( 208)					row2->set(HX_("price",89,4e,8b,c8),row->get(HX_("price",89,4e,8b,c8)));
HXLINE( 209)					bids->push(row2);
HXLINE( 210)					i = (i + 1);
            				}
HXLINE( 212)				return ::maglev::MagLevResult_obj::fromResult(bids);
            			}
            			else {
HXLINE( 215)				 ::maglev::MagLevError error = ::maglev::MagLevError_obj::create(0,HX_("persistence getter did not return array",4b,24,e2,1e),::maglev::MagLevNull_obj::create());
HXLINE( 216)				return ::maglev::MagLevResult_obj::fromError(error);
            			}
HXLINE( 201)			return null();
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_9, ::englishauction::EnglishAuction,_gthis) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_219_registerMyMethods)
HXLINE( 220)			::String auctionId = ::hx::TCast<  ::maglev::MagLevString >::cast(args->get(0))->getString();
HXLINE( 221)			int numBids = _gthis->bidRepo->GetNumberOfBids(auctionId);
HXLINE( 222)			return ::maglev::MagLevResult_obj::fromResult(::maglev::MagLevNumber_obj::fromInt(numBids));
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_11, ::englishauction::EnglishAuction,_gthis) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_10, ::maglev::MagLevResult,result) HXARGC(1)
            			void _hx_run( ::englishauction::AuctionModel auction){
            				HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_228_registerMyMethods)
HXLINE( 228)				if (::hx::IsNull( auction )) {
HXLINE( 229)					 ::maglev::MagLevError error = ::maglev::MagLevError_obj::create(0,HX_("auction not found",58,f7,69,1a),::maglev::MagLevNull_obj::create());
HXLINE( 230)					result->setError(error);
            				}
            				else {
HXLINE( 232)					Float priceIncrement = auction->priceIncrement;
HXLINE( 233)					 ::maglev::MagLevNumber ret = ::maglev::MagLevNumber_obj::fromFloat(priceIncrement);
HXLINE( 234)					result->setResult(ret);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_224_registerMyMethods)
HXLINE( 225)			::String auctionId = ::hx::TCast<  ::maglev::MagLevString >::cast(args->get(0))->getString();
HXLINE( 226)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::createAsync();
HXLINE( 227)			_gthis->auctionRepo->FindById(auctionId, ::Dynamic(new _hx_Closure_10(result)));
HXLINE( 237)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_13, ::englishauction::EnglishAuction,_gthis) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_12, ::maglev::MagLevResult,result) HXARGC(1)
            			void _hx_run( ::englishauction::AuctionModel auction){
            				HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_243_registerMyMethods)
HXLINE( 243)				if (::hx::IsNull( auction )) {
HXLINE( 244)					 ::maglev::MagLevError error = ::maglev::MagLevError_obj::create(0,HX_("auction not found",58,f7,69,1a),::maglev::MagLevNull_obj::create());
HXLINE( 245)					result->setError(error);
            				}
            				else {
HXLINE( 247)					Float priceIncrement = auction->priceIncrement;
HXLINE( 248)					 ::maglev::MagLevNumber ret = ::maglev::MagLevNumber_obj::fromFloat(priceIncrement);
HXLINE( 249)					result->setResult(ret);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_239_registerMyMethods)
HXLINE( 240)			::String auctionId = ::hx::TCast<  ::maglev::MagLevString >::cast(args->get(0))->getString();
HXLINE( 241)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::createAsync();
HXLINE( 242)			_gthis->auctionRepo->FindById(auctionId, ::Dynamic(new _hx_Closure_12(result)));
HXLINE( 252)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_15, ::englishauction::EnglishAuction,_gthis) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_14, ::maglev::MagLevResult,result) HXARGC(1)
            			void _hx_run( ::englishauction::AuctionModel auction){
            				HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_258_registerMyMethods)
HXLINE( 258)				if (::hx::IsNull( auction )) {
HXLINE( 259)					 ::maglev::MagLevError error = ::maglev::MagLevError_obj::create(0,HX_("auction not found",58,f7,69,1a),::maglev::MagLevNull_obj::create());
HXLINE( 260)					result->setError(error);
            				}
            				else {
HXLINE( 262)					Float reservePrice = auction->reservePrice;
HXLINE( 263)					 ::maglev::MagLevNumber ret = ::maglev::MagLevNumber_obj::fromFloat(reservePrice);
HXLINE( 264)					result->setResult(ret);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_254_registerMyMethods)
HXLINE( 255)			::String auctionId = ::hx::TCast<  ::maglev::MagLevString >::cast(args->get(0))->getString();
HXLINE( 256)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::createAsync();
HXLINE( 257)			_gthis->auctionRepo->FindById(auctionId, ::Dynamic(new _hx_Closure_14(result)));
HXLINE( 267)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_17, ::englishauction::EnglishAuction,_gthis) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_16, ::maglev::MagLevResult,result) HXARGC(1)
            			void _hx_run( ::englishauction::AuctionModel auction){
            				HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_273_registerMyMethods)
HXLINE( 273)				if (::hx::IsNull( auction )) {
HXLINE( 274)					 ::maglev::MagLevError error = ::maglev::MagLevError_obj::create(0,HX_("auction not found",58,f7,69,1a),::maglev::MagLevNull_obj::create());
HXLINE( 275)					result->setError(error);
            				}
            				else {
HXLINE( 277)					Float startingPrice = auction->startingPrice;
HXLINE( 278)					 ::maglev::MagLevNumber ret = ::maglev::MagLevNumber_obj::fromFloat(startingPrice);
HXLINE( 279)					result->setResult(ret);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_269_registerMyMethods)
HXLINE( 270)			::String auctionId = ::hx::TCast<  ::maglev::MagLevString >::cast(args->get(0))->getString();
HXLINE( 271)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::createAsync();
HXLINE( 272)			_gthis->auctionRepo->FindById(auctionId, ::Dynamic(new _hx_Closure_16(result)));
HXLINE( 282)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_19, ::englishauction::EnglishAuction,_gthis) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_18, ::englishauction::EnglishAuction,_gthis,::String,auctionId, ::maglev::MagLevResult,result) HXARGC(1)
            			void _hx_run( ::englishauction::AuctionModel auction){
            				HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_288_registerMyMethods)
HXLINE( 288)				if (::hx::IsNull( auction )) {
HXLINE( 289)					 ::maglev::MagLevError error = ::maglev::MagLevError_obj::create(0,HX_("auction not found",58,f7,69,1a),::maglev::MagLevNull_obj::create());
HXLINE( 290)					result->setError(error);
            				}
            				else {
HXLINE( 292)					Float highestBid = ( (Float)(0) );
HXLINE( 293)					::Array< ::Dynamic> bids = _gthis->bidRepo->GetHighestBids(auctionId,1);
HXLINE( 294)					if ((bids->length > 0)) {
HXLINE( 295)						highestBid = bids->__get(0).StaticCast<  ::englishauction::BidModel >()->amount;
            					}
HXLINE( 298)					Float minBid = ((Float)0.00);
HXLINE( 299)					minBid = ::Math_obj::max(minBid,(highestBid + auction->priceIncrement));
HXLINE( 300)					minBid = ::Math_obj::max(minBid,auction->startingPrice);
HXLINE( 302)					 ::maglev::MagLevNumber ret = ::maglev::MagLevNumber_obj::fromFloat(minBid);
HXLINE( 303)					result->setResult(ret);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_284_registerMyMethods)
HXLINE( 285)			::String auctionId = ::hx::TCast<  ::maglev::MagLevString >::cast(args->get(0))->getString();
HXLINE( 286)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::createAsync();
HXLINE( 287)			_gthis->auctionRepo->FindById(auctionId, ::Dynamic(new _hx_Closure_18(_gthis,auctionId,result)));
HXLINE( 306)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_21, ::englishauction::EnglishAuction,_gthis) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_20,int,now, ::maglev::MagLevResult,result) HXARGC(1)
            			void _hx_run( ::englishauction::AuctionModel auction){
            				HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_316_registerMyMethods)
HXLINE( 316)				if (::hx::IsNull( auction )) {
HXLINE( 317)					 ::maglev::MagLevError error = ::maglev::MagLevError_obj::create(0,HX_("auction not found",58,f7,69,1a),::maglev::MagLevNull_obj::create());
HXLINE( 318)					result->setError(error);
            				}
            				else {
HXLINE( 320)					int timeRemaining = ::Std_obj::_hx_int(( (Float)((auction->end - now)) ));
HXLINE( 321)					if ((timeRemaining < 0)) {
HXLINE( 322)						timeRemaining = 0;
            					}
HXLINE( 324)					 ::maglev::MagLevNumber ret = ::maglev::MagLevNumber_obj::fromInt(timeRemaining);
HXLINE( 325)					result->setResult(ret);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_308_registerMyMethods)
HXLINE( 309)			::String auctionId = ::hx::TCast<  ::maglev::MagLevString >::cast(args->get(0))->getString();
HXLINE( 310)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::createAsync();
HXLINE( 311)			int now = ::Std_obj::_hx_int(::Date_obj::now()->getTime());
HXLINE( 312)			if ((args->size() > 1)) {
HXLINE( 313)				now = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(1))->getInt();
            			}
HXLINE( 315)			_gthis->auctionRepo->FindById(auctionId, ::Dynamic(new _hx_Closure_20(now,result)));
HXLINE( 328)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_23, ::englishauction::EnglishAuction,_gthis) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_22, ::englishauction::EnglishAuction,_gthis, ::maglev::MagLevResult,result) HXARGC(1)
            			void _hx_run(::Array< ::Dynamic> auctions){
            				HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_346_registerMyMethods)
HXLINE( 347)				 ::maglev::MagLevArray results = ::maglev::MagLevArray_obj::create();
HXLINE( 348)				{
HXLINE( 348)					int _g = 0;
HXDLIN( 348)					while((_g < auctions->length)){
HXLINE( 348)						 ::englishauction::AuctionModel auction = auctions->__get(_g).StaticCast<  ::englishauction::AuctionModel >();
HXDLIN( 348)						_g = (_g + 1);
HXLINE( 349)						 ::maglev::MagLevObject result = _gthis->auctionModelToMagLevObject(auction);
HXLINE( 350)						results->push(result);
            					}
            				}
HXLINE( 352)				result->setResult(results);
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_332_registerMyMethods)
HXLINE( 333)			int endfrom = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(0))->getInt();
HXLINE( 334)			int endto = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(1))->getInt();
HXLINE( 335)			int page = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(2))->getInt();
HXLINE( 336)			int perpage = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(3))->getInt();
HXLINE( 337)			::String sort = HX_("end",db,03,4d,00);
HXLINE( 338)			bool asc = true;
HXLINE( 339)			if ((args->size() > 4)) {
HXLINE( 340)				sort = ::hx::TCast<  ::maglev::MagLevString >::cast(args->get(4))->getString();
            			}
HXLINE( 342)			if ((args->size() > 5)) {
HXLINE( 343)				asc = ::hx::TCast<  ::maglev::MagLevBoolean >::cast(args->get(5))->getBool();
            			}
HXLINE( 345)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::createAsync();
HXLINE( 346)			_gthis->auctionRepo->FindAuctionsEnding(endfrom,endto,page,perpage,sort,asc, ::Dynamic(new _hx_Closure_22(_gthis,result)));
HXLINE( 354)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_25, ::englishauction::EnglishAuction,_gthis) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_24, ::englishauction::EnglishAuction,_gthis, ::maglev::MagLevResult,result) HXARGC(1)
            			void _hx_run(::Array< ::Dynamic> auctions){
            				HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_370_registerMyMethods)
HXLINE( 371)				 ::maglev::MagLevArray results = ::maglev::MagLevArray_obj::create();
HXLINE( 372)				{
HXLINE( 372)					int _g = 0;
HXDLIN( 372)					while((_g < auctions->length)){
HXLINE( 372)						 ::englishauction::AuctionModel auction = auctions->__get(_g).StaticCast<  ::englishauction::AuctionModel >();
HXDLIN( 372)						_g = (_g + 1);
HXLINE( 373)						 ::maglev::MagLevObject result = _gthis->auctionModelToMagLevObject(auction);
HXLINE( 374)						results->push(result);
            					}
            				}
HXLINE( 376)				result->setResult(results);
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_356_registerMyMethods)
HXLINE( 357)			int endfrom = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(0))->getInt();
HXLINE( 358)			int endto = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(1))->getInt();
HXLINE( 359)			int page = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(2))->getInt();
HXLINE( 360)			int perpage = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(3))->getInt();
HXLINE( 361)			::String sort = HX_("end",db,03,4d,00);
HXLINE( 362)			bool asc = true;
HXLINE( 363)			if ((args->size() > 4)) {
HXLINE( 364)				sort = ::hx::TCast<  ::maglev::MagLevString >::cast(args->get(4))->getString();
            			}
HXLINE( 366)			if ((args->size() > 5)) {
HXLINE( 367)				asc = ::hx::TCast<  ::maglev::MagLevBoolean >::cast(args->get(5))->getBool();
            			}
HXLINE( 369)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::createAsync();
HXLINE( 370)			_gthis->auctionRepo->FindAuctionsStarting(endfrom,endto,page,perpage,sort,asc, ::Dynamic(new _hx_Closure_24(_gthis,result)));
HXLINE( 378)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_27, ::englishauction::EnglishAuction,_gthis) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_26, ::englishauction::EnglishAuction,_gthis, ::maglev::MagLevResult,result) HXARGC(1)
            			void _hx_run(::Array< ::Dynamic> auctions){
            				HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_392_registerMyMethods)
HXLINE( 393)				 ::maglev::MagLevArray results = ::maglev::MagLevArray_obj::create();
HXLINE( 394)				{
HXLINE( 394)					int _g = 0;
HXDLIN( 394)					while((_g < auctions->length)){
HXLINE( 394)						 ::englishauction::AuctionModel auction = auctions->__get(_g).StaticCast<  ::englishauction::AuctionModel >();
HXDLIN( 394)						_g = (_g + 1);
HXLINE( 395)						 ::maglev::MagLevObject result = _gthis->auctionModelToMagLevObject(auction);
HXLINE( 396)						results->push(result);
            					}
            				}
HXLINE( 398)				result->setResult(results);
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_380_registerMyMethods)
HXLINE( 381)			int page = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(0))->getInt();
HXLINE( 382)			int perpage = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(1))->getInt();
HXLINE( 383)			::String sort = HX_("end",db,03,4d,00);
HXLINE( 384)			bool asc = true;
HXLINE( 385)			if ((args->size() > 2)) {
HXLINE( 386)				sort = ::hx::TCast<  ::maglev::MagLevString >::cast(args->get(2))->getString();
            			}
HXLINE( 388)			if ((args->size() > 3)) {
HXLINE( 389)				asc = ::hx::TCast<  ::maglev::MagLevBoolean >::cast(args->get(3))->getBool();
            			}
HXLINE( 391)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::createAsync();
HXLINE( 392)			_gthis->auctionRepo->FindOpenAuctions(page,perpage,sort,asc, ::Dynamic(new _hx_Closure_26(_gthis,result)));
HXLINE( 400)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_23_registerMyMethods)
HXDLIN(  23)		 ::englishauction::EnglishAuction _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  24)		 ::maglev::MagLev bus = this->maglev;
HXLINE(  25)		 ::maglev::MagLev _hx_tmp = this->maglev;
HXDLIN(  25)		_hx_tmp->_hx_register(HX_("EnglishAuction.Create",17,3d,e9,16),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_1(_gthis))));
HXLINE(  39)		 ::maglev::MagLev _hx_tmp1 = this->maglev;
HXDLIN(  39)		_hx_tmp1->_hx_register(HX_("EnglishAuction.GetStart",c7,56,72,49),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_2(bus))));
HXLINE(  64)		 ::maglev::MagLev _hx_tmp2 = this->maglev;
HXDLIN(  64)		_hx_tmp2->_hx_register(HX_("EnglishAuction.GetEnd",00,13,f6,3d),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_3(bus))));
HXLINE(  89)		 ::maglev::MagLev _hx_tmp3 = this->maglev;
HXDLIN(  89)		_hx_tmp3->_hx_register(HX_("EnglishAuction.HasStarted",a2,90,1d,87),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_4(bus))));
HXLINE( 115)		 ::maglev::MagLev _hx_tmp4 = this->maglev;
HXDLIN( 115)		_hx_tmp4->_hx_register(HX_("EnglishAuction.HasEnded",1b,66,62,62),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_5(bus))));
HXLINE( 141)		 ::maglev::MagLev _hx_tmp5 = this->maglev;
HXDLIN( 141)		_hx_tmp5->_hx_register(HX_("EnglishAuction.Bid",c2,d3,e1,19),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_6(bus))));
HXLINE( 158)		 ::maglev::MagLev _hx_tmp6 = this->maglev;
HXDLIN( 158)		_hx_tmp6->_hx_register(HX_("EnglishAuction.GetHighestBidder",dd,e5,73,16),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_7(bus))));
HXLINE( 187)		 ::maglev::MagLev _hx_tmp7 = this->maglev;
HXDLIN( 187)		_hx_tmp7->_hx_register(HX_("EnglishAuction.GetHighestBids",7f,51,a8,de),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_8(bus))));
HXLINE( 219)		 ::maglev::MagLev _hx_tmp8 = this->maglev;
HXDLIN( 219)		_hx_tmp8->_hx_register(HX_("EnglishAuction.GetNumberOfBids",b1,6d,7e,c5),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_9(_gthis))));
HXLINE( 224)		 ::maglev::MagLev _hx_tmp9 = this->maglev;
HXDLIN( 224)		_hx_tmp9->_hx_register(HX_("EnglishAuction.GetPriceIncrement",61,27,55,b3),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_11(_gthis))));
HXLINE( 239)		 ::maglev::MagLev _hx_tmp10 = this->maglev;
HXDLIN( 239)		_hx_tmp10->_hx_register(HX_("EnglishAuction.GetPriceIncrement",61,27,55,b3),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_13(_gthis))));
HXLINE( 254)		 ::maglev::MagLev _hx_tmp11 = this->maglev;
HXDLIN( 254)		_hx_tmp11->_hx_register(HX_("EnglishAuction.GetReservePrice",e8,8a,d1,87),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_15(_gthis))));
HXLINE( 269)		 ::maglev::MagLev _hx_tmp12 = this->maglev;
HXDLIN( 269)		_hx_tmp12->_hx_register(HX_("EnglishAuction.GetStartingPrice",0e,b4,c5,fc),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_17(_gthis))));
HXLINE( 284)		 ::maglev::MagLev _hx_tmp13 = this->maglev;
HXDLIN( 284)		_hx_tmp13->_hx_register(HX_("EnglishAuction.CalcMinimumBid",9f,31,3e,2b),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_19(_gthis))));
HXLINE( 308)		 ::maglev::MagLev _hx_tmp14 = this->maglev;
HXDLIN( 308)		_hx_tmp14->_hx_register(HX_("EnglishAuction.CalcTimeRemaining",19,a9,a9,bb),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_21(_gthis))));
HXLINE( 332)		 ::maglev::MagLev _hx_tmp15 = this->maglev;
HXDLIN( 332)		_hx_tmp15->_hx_register(HX_("EnglishAuction.GetAuctionsEnding",d2,45,aa,35),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_23(_gthis))));
HXLINE( 356)		 ::maglev::MagLev _hx_tmp16 = this->maglev;
HXDLIN( 356)		_hx_tmp16->_hx_register(HX_("EnglishAuction.GetAuctionsStarting",6b,34,ea,c2),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_25(_gthis))));
HXLINE( 380)		 ::maglev::MagLev _hx_tmp17 = this->maglev;
HXDLIN( 380)		_hx_tmp17->_hx_register(HX_("EnglishAuction.GetOpenAuctions",f5,86,16,fe),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_27(_gthis))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(EnglishAuction_obj,registerMyMethods,(void))

 ::maglev::MagLevObject EnglishAuction_obj::auctionModelToMagLevObject( ::englishauction::AuctionModel m){
            	HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_411_auctionModelToMagLevObject)
HXLINE( 412)		 ::maglev::MagLevObject o = ::maglev::MagLevObject_obj::create();
HXLINE( 413)		o->set(HX_("auctionId",fe,08,7f,46),::maglev::MagLevString_obj::fromString(m->id));
HXLINE( 414)		o->set(HX_("start",62,74,0b,84),::maglev::MagLevNumber_obj::fromInt(m->start));
HXLINE( 415)		o->set(HX_("end",db,03,4d,00),::maglev::MagLevNumber_obj::fromInt(m->end));
HXLINE( 416)		o->set(HX_("startingPrice",a9,64,6e,09),::maglev::MagLevNumber_obj::fromFloat(m->startingPrice));
HXLINE( 417)		o->set(HX_("reservePrice",ad,26,d1,1a),::maglev::MagLevNumber_obj::fromFloat(m->reservePrice));
HXLINE( 418)		o->set(HX_("priceIncrement",66,fe,46,ba),::maglev::MagLevNumber_obj::fromFloat(m->priceIncrement));
HXLINE( 419)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(EnglishAuction_obj,auctionModelToMagLevObject,return )

 ::Dynamic EnglishAuction_obj::convertToHaxe( ::maglev::MagLevAny x){
            	HX_GC_STACKFRAME(&_hx_pos_f704f8914f7b4676_423_convertToHaxe)
HXDLIN( 423)		int _hx_tmp = x->getType();
HXDLIN( 423)		if ((_hx_tmp == ::maglev::MagLevNull_obj::getStaticType())) {
HXLINE( 424)			return null();
            		}
            		else {
HXLINE( 426)			int _hx_tmp = x->getType();
HXDLIN( 426)			if ((_hx_tmp == ::maglev::MagLevBoolean_obj::getStaticType())) {
HXLINE( 427)				 ::maglev::MagLevBoolean y = ::hx::TCast<  ::maglev::MagLevBoolean >::cast(x);
HXLINE( 428)				return y->getBool();
            			}
            			else {
HXLINE( 430)				int _hx_tmp = x->getType();
HXDLIN( 430)				if ((_hx_tmp == ::maglev::MagLevString_obj::getStaticType())) {
HXLINE( 431)					 ::maglev::MagLevString y = ::hx::TCast<  ::maglev::MagLevString >::cast(x);
HXLINE( 432)					return y->getString();
            				}
            				else {
HXLINE( 434)					int _hx_tmp = x->getType();
HXDLIN( 434)					if ((_hx_tmp == ::maglev::MagLevNumber_obj::getStaticType())) {
HXLINE( 435)						 ::maglev::MagLevNumber y = ::hx::TCast<  ::maglev::MagLevNumber >::cast(x);
HXLINE( 436)						return y->getFloat();
            					}
            					else {
HXLINE( 438)						int _hx_tmp = x->getType();
HXDLIN( 438)						if ((_hx_tmp == ::maglev::MagLevArray_obj::getStaticType())) {
HXLINE( 439)							 ::maglev::MagLevArray y = ::hx::TCast<  ::maglev::MagLevArray >::cast(x);
HXLINE( 440)							::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new();
HXLINE( 441)							int i = 0;
HXLINE( 442)							while((i < y->size())){
HXLINE( 443)								arr->push(this->convertToHaxe(y->get(i)));
            							}
HXLINE( 445)							return arr;
            						}
            						else {
HXLINE( 447)							int _hx_tmp = x->getType();
HXDLIN( 447)							if ((_hx_tmp == ::maglev::MagLevObject_obj::getStaticType())) {
HXLINE( 448)								 ::maglev::MagLevObject y = ::hx::TCast<  ::maglev::MagLevObject >::cast(x);
HXLINE( 449)								 ::haxe::ds::StringMap map =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 450)								 ::maglev::MagLevArray keys = y->keys();
HXLINE( 451)								int i = 0;
HXLINE( 452)								while((i < keys->size())){
HXLINE( 453)									::String key = ::hx::TCast<  ::maglev::MagLevString >::cast(keys->get(i))->getString();
HXLINE( 454)									map->set(key,this->convertToHaxe(y->get(key)));
            								}
HXLINE( 456)								return map;
            							}
            							else {
HXLINE( 459)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("convertToHaxe: unknown type",4a,83,07,f2)));
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 423)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(EnglishAuction_obj,convertToHaxe,return )

 ::maglev::MagLevAny EnglishAuction_obj::convertToMagLev( ::Dynamic x){
            	HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_464_convertToMagLev)
HXDLIN( 464)		if (::hx::IsNull( x )) {
HXLINE( 465)			return ::maglev::MagLevNull_obj::create();
            		}
            		else {
HXLINE( 467)			if (::Std_obj::isOfType(x,( ( ::Dynamic)(::hx::ClassOf< bool >()) ))) {
HXLINE( 468)				return ::maglev::MagLevBoolean_obj::fromBool(::hx::TCast< bool >::cast(x));
            			}
            			else {
HXLINE( 470)				if (::Std_obj::isOfType(x,( ( ::Dynamic)(::hx::ClassOf< ::String >()) ))) {
HXLINE( 471)					return ::maglev::MagLevString_obj::fromString(::hx::TCast< ::String >::cast(x));
            				}
            				else {
HXLINE( 473)					if (::Std_obj::isOfType(x,( ( ::Dynamic)(::hx::ClassOf< int >()) ))) {
HXLINE( 474)						return ::maglev::MagLevNumber_obj::fromInt(::hx::TCast< int >::cast(x));
            					}
            					else {
HXLINE( 476)						if (::Std_obj::isOfType(x,( ( ::Dynamic)(::hx::ClassOf< ::Float >()) ))) {
HXLINE( 477)							return ::maglev::MagLevNumber_obj::fromFloat(( (Float)(x) ));
            						}
            						else {
HXLINE( 479)							if (::Std_obj::isOfType(x,( ( ::Dynamic)(::hx::ArrayBase::__mClass) ))) {
HXLINE( 480)								 ::maglev::MagLevArray arr = ::maglev::MagLevArray_obj::create();
HXLINE( 481)								::cpp::VirtualArray y = ( (::cpp::VirtualArray)(x) );
HXLINE( 482)								{
HXLINE( 482)									int _g = 0;
HXDLIN( 482)									while((_g < y->get_length())){
HXLINE( 482)										 ::Dynamic item = y->__get(_g);
HXDLIN( 482)										_g = (_g + 1);
HXLINE( 483)										arr->push(this->convertToMagLev(item));
            									}
            								}
HXLINE( 485)								return arr;
            							}
            							else {
HXLINE( 487)								if (::Std_obj::isOfType(x,( ( ::Dynamic)(::hx::ClassOf< ::haxe::ds::StringMap >()) ))) {
HXLINE( 488)									 ::haxe::ds::StringMap map = ( ( ::haxe::ds::StringMap)(x) );
HXLINE( 489)									 ::maglev::MagLevObject obj = ::maglev::MagLevObject_obj::create();
HXLINE( 490)									{
HXLINE( 490)										 ::Dynamic key = map->keys();
HXDLIN( 490)										while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 490)											::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 491)											obj->set(key1,this->convertToMagLev(map->get(key1)));
            										}
            									}
HXLINE( 493)									return obj;
            								}
            								else {
HXLINE( 495)									if (::Reflect_obj::isObject(x)) {
HXLINE( 496)										 ::maglev::MagLevObject obj = ::maglev::MagLevObject_obj::create();
HXLINE( 497)										{
HXLINE( 497)											int _g = 0;
HXDLIN( 497)											::Array< ::String > _g1 = ::Reflect_obj::fields(x);
HXDLIN( 497)											while((_g < _g1->length)){
HXLINE( 497)												::String field = _g1->__get(_g);
HXDLIN( 497)												_g = (_g + 1);
HXLINE( 498)												 ::Dynamic val = ::Reflect_obj::getProperty(x,field);
HXLINE( 499)												obj->set(field,this->convertToMagLev(val));
            											}
            										}
HXLINE( 501)										return obj;
            									}
            									else {
HXLINE( 503)										if (::Reflect_obj::isFunction(x)) {
HXLINE( 504)											 ::Dynamic f = x;
HXLINE( 505)											return ::maglev::MagLevFunction_obj::fromFunction(f);
            										}
            										else {
HXLINE( 508)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("convertToMagLev: unknown type",ae,84,a9,64)));
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 464)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(EnglishAuction_obj,convertToMagLev,return )


::hx::ObjectPtr< EnglishAuction_obj > EnglishAuction_obj::__new( ::maglev::MagLev maglev) {
	::hx::ObjectPtr< EnglishAuction_obj > __this = new EnglishAuction_obj();
	__this->__construct(maglev);
	return __this;
}

::hx::ObjectPtr< EnglishAuction_obj > EnglishAuction_obj::__alloc(::hx::Ctx *_hx_ctx, ::maglev::MagLev maglev) {
	EnglishAuction_obj *__this = (EnglishAuction_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(EnglishAuction_obj), true, "englishauction.EnglishAuction"));
	*(void **)__this = EnglishAuction_obj::_hx_vtable;
	__this->__construct(maglev);
	return __this;
}

EnglishAuction_obj::EnglishAuction_obj()
{
}

void EnglishAuction_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(EnglishAuction);
	HX_MARK_MEMBER_NAME(maglev,"maglev");
	HX_MARK_MEMBER_NAME(auctionRepo,"auctionRepo");
	HX_MARK_MEMBER_NAME(bidRepo,"bidRepo");
	HX_MARK_END_CLASS();
}

void EnglishAuction_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(maglev,"maglev");
	HX_VISIT_MEMBER_NAME(auctionRepo,"auctionRepo");
	HX_VISIT_MEMBER_NAME(bidRepo,"bidRepo");
}

::hx::Val EnglishAuction_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"maglev") ) { return ::hx::Val( maglev ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"bidRepo") ) { return ::hx::Val( bidRepo ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"auctionRepo") ) { return ::hx::Val( auctionRepo ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"convertToHaxe") ) { return ::hx::Val( convertToHaxe_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"convertToMagLev") ) { return ::hx::Val( convertToMagLev_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"registerMyMethods") ) { return ::hx::Val( registerMyMethods_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"auctionModelToMagLevObject") ) { return ::hx::Val( auctionModelToMagLevObject_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val EnglishAuction_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"maglev") ) { maglev=inValue.Cast<  ::maglev::MagLev >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"bidRepo") ) { bidRepo=inValue.Cast<  ::englishauction::BidRepository >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"auctionRepo") ) { auctionRepo=inValue.Cast<  ::englishauction::AuctionRepository >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void EnglishAuction_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("maglev",2a,df,2b,b3));
	outFields->push(HX_("auctionRepo",55,d4,05,31));
	outFields->push(HX_("bidRepo",cf,df,42,b1));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo EnglishAuction_obj_sMemberStorageInfo[] = {
	{::hx::fsUnknown /*  ::maglev::MagLev */ ,(int)offsetof(EnglishAuction_obj,maglev),HX_("maglev",2a,df,2b,b3)},
	{::hx::fsObject /*  ::englishauction::AuctionRepository */ ,(int)offsetof(EnglishAuction_obj,auctionRepo),HX_("auctionRepo",55,d4,05,31)},
	{::hx::fsObject /*  ::englishauction::BidRepository */ ,(int)offsetof(EnglishAuction_obj,bidRepo),HX_("bidRepo",cf,df,42,b1)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *EnglishAuction_obj_sStaticStorageInfo = 0;
#endif

static ::String EnglishAuction_obj_sMemberFields[] = {
	HX_("maglev",2a,df,2b,b3),
	HX_("auctionRepo",55,d4,05,31),
	HX_("bidRepo",cf,df,42,b1),
	HX_("registerMyMethods",83,b1,0a,b9),
	HX_("auctionModelToMagLevObject",8a,b4,95,0c),
	HX_("convertToHaxe",94,89,1b,b6),
	HX_("convertToMagLev",f8,a3,b9,0f),
	::String(null()) };

::hx::Class EnglishAuction_obj::__mClass;

void EnglishAuction_obj::__register()
{
	EnglishAuction_obj _hx_dummy;
	EnglishAuction_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("englishauction.EnglishAuction",0e,9e,93,52);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(EnglishAuction_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< EnglishAuction_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EnglishAuction_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EnglishAuction_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void EnglishAuction_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_11_boot)
HXDLIN(  11)		__mClass->__meta__ =  ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("obj",f7,8f,54,00), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,::cpp::VirtualArray_obj::__new(4)->init(0,HX_("checkstyle:FieldDocComment",70,56,1b,20))->init(1,HX_("checkstyle:LocalVariableName",c1,ac,a3,03))->init(2,HX_("checkstyle:MultipleStringLiterals",d6,ed,13,79))->init(3,HX_("checkstyle:MagicNumber",a5,aa,f4,8b)))))));
            	}
}

} // end namespace englishauction
