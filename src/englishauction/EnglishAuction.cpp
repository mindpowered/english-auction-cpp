// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_16d41c6fc5b8bf5d
#define INCLUDED_16d41c6fc5b8bf5d
#include "maglev/MagLev.h"
#endif
#ifndef INCLUDED_869a921fcf5bba54
#define INCLUDED_869a921fcf5bba54
#include "maglev/MagLevAny.h"
#endif
#ifndef INCLUDED_20db69a30a45e926
#define INCLUDED_20db69a30a45e926
#include "maglev/MagLevArray.h"
#endif
#ifndef INCLUDED_35ec03520fbb0747
#define INCLUDED_35ec03520fbb0747
#include "maglev/MagLevBoolean.h"
#endif
#ifndef INCLUDED_d8a74f90a5c0b964
#define INCLUDED_d8a74f90a5c0b964
#include "maglev/MagLevError.h"
#endif
#ifndef INCLUDED_7f9204b932c8d809
#define INCLUDED_7f9204b932c8d809
#include "maglev/MagLevFunction.h"
#endif
#ifndef INCLUDED_ba46386e6aba7150
#define INCLUDED_ba46386e6aba7150
#include "maglev/MagLevNull.h"
#endif
#ifndef INCLUDED_95fa5e9194badcf5
#define INCLUDED_95fa5e9194badcf5
#include "maglev/MagLevNumber.h"
#endif
#ifndef INCLUDED_f4da16f85a617f60
#define INCLUDED_f4da16f85a617f60
#include "maglev/MagLevObject.h"
#endif
#ifndef INCLUDED_65acb6100057af6e
#define INCLUDED_65acb6100057af6e
#include "maglev/MagLevResult.h"
#endif
#ifndef INCLUDED_c859d2752ef86c43
#define INCLUDED_c859d2752ef86c43
#include "maglev/MagLevString.h"
#endif
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_englishauction_AuctionModel
#include <englishauction/AuctionModel.h>
#endif
#ifndef INCLUDED_englishauction_AuctionRepository
#include <englishauction/AuctionRepository.h>
#endif
#ifndef INCLUDED_englishauction_BidModel
#include <englishauction/BidModel.h>
#endif
#ifndef INCLUDED_englishauction_BidRepository
#include <englishauction/BidRepository.h>
#endif
#ifndef INCLUDED_englishauction_EnglishAuction
#include <englishauction/EnglishAuction.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f704f8914f7b4676_16_new,"englishauction.EnglishAuction","new",0x16125e00,"englishauction.EnglishAuction.new","englishauction/EnglishAuction.hx",16,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_35_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",35,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_25_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",25,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_43_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",43,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_39_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",39,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_58_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",58,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_54_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",54,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_73_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",73,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_69_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",69,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_90_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",90,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_86_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",86,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_113_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",113,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_103_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",103,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_129_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",129,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_131_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",131,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_117_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",117,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_165_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",165,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_167_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",167,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_152_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",152,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_194_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",194,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_190_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",190,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_202_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",202,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_198_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",198,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_217_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",217,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_213_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",213,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_232_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",232,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_228_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",228,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_247_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",247,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_243_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",243,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_262_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",262,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_267_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",267,0xd6cb504f)
static const Float _hx_array_data_52939e0e_35[] = {
	(Float)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_258_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",258,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_291_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",291,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_283_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",283,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_321_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",321,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_307_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",307,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_345_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",345,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_331_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",331,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_367_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",367,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_355_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",355,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_23_registerMyMethods,"englishauction.EnglishAuction","registerMyMethods",0xd389d723,"englishauction.EnglishAuction.registerMyMethods","englishauction/EnglishAuction.hx",23,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_386_auctionModelToMagLevObject,"englishauction.EnglishAuction","auctionModelToMagLevObject",0x1c14daea,"englishauction.EnglishAuction.auctionModelToMagLevObject","englishauction/EnglishAuction.hx",386,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_398_convertToHaxe,"englishauction.EnglishAuction","convertToHaxe",0xb16f5f34,"englishauction.EnglishAuction.convertToHaxe","englishauction/EnglishAuction.hx",398,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_439_convertToMagLev,"englishauction.EnglishAuction","convertToMagLev",0x67e62198,"englishauction.EnglishAuction.convertToMagLev","englishauction/EnglishAuction.hx",439,0xd6cb504f)
HX_LOCAL_STACK_FRAME(_hx_pos_f704f8914f7b4676_11_boot,"englishauction.EnglishAuction","boot",0x3218e292,"englishauction.EnglishAuction.boot","englishauction/EnglishAuction.hx",11,0xd6cb504f)
namespace englishauction{

void EnglishAuction_obj::__construct( ::maglev::MagLev maglev){
            	HX_GC_STACKFRAME(&_hx_pos_f704f8914f7b4676_16_new)
HXLINE(  17)		this->maglev = maglev;
HXLINE(  18)		this->auctionRepo =  ::englishauction::AuctionRepository_obj::__alloc( HX_CTX ,maglev);
HXLINE(  19)		this->bidRepo =  ::englishauction::BidRepository_obj::__alloc( HX_CTX ,maglev);
HXLINE(  20)		this->registerMyMethods();
            	}

Dynamic EnglishAuction_obj::__CreateEmpty() { return new EnglishAuction_obj; }

void *EnglishAuction_obj::_hx_vtable = 0;

Dynamic EnglishAuction_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< EnglishAuction_obj > _hx_result = new EnglishAuction_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool EnglishAuction_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x55949a6e;
}

void EnglishAuction_obj::registerMyMethods(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::englishauction::EnglishAuction,_gthis) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::maglev::MagLevResult,result) HXARGC(1)
            			void _hx_run(::String id){
            				HX_GC_STACKFRAME(&_hx_pos_f704f8914f7b4676_35_registerMyMethods)
HXLINE(  35)				 ::maglev::MagLevResult result1 = result;
HXDLIN(  35)				result1->setResult(::maglev::MagLevString_obj::fromString(id));
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_GC_STACKFRAME(&_hx_pos_f704f8914f7b4676_25_registerMyMethods)
HXLINE(  27)			 ::englishauction::AuctionModel model =  ::englishauction::AuctionModel_obj::__alloc( HX_CTX );
HXLINE(  28)			model->start = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(0))->getInt();
HXLINE(  29)			model->end = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(1))->getInt();
HXLINE(  30)			model->startingPrice = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(2))->getFloat();
HXLINE(  31)			model->reservePrice = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(3))->getFloat();
HXLINE(  32)			model->priceIncrement = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(4))->getFloat();
HXLINE(  33)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::createAsync();
HXLINE(  34)			_gthis->auctionRepo->Add(model, ::Dynamic(new _hx_Closure_0(result)));
HXLINE(  37)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::englishauction::EnglishAuction,_gthis) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::maglev::MagLevResult,result) HXARGC(1)
            			void _hx_run( ::englishauction::AuctionModel auction){
            				HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_43_registerMyMethods)
HXLINE(  43)				if (::hx::IsNull( auction )) {
HXLINE(  44)					 ::maglev::MagLevError error = ::maglev::MagLevError_obj::create(0,HX_("auction not found",58,f7,69,1a),::maglev::MagLevNull_obj::create());
HXLINE(  45)					result->setError(error);
            				}
            				else {
HXLINE(  47)					int start = auction->start;
HXLINE(  48)					 ::maglev::MagLevNumber ret = ::maglev::MagLevNumber_obj::fromFloat(( (Float)(start) ));
HXLINE(  49)					result->setResult(ret);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_39_registerMyMethods)
HXLINE(  40)			::String auctionId = ::hx::TCast<  ::maglev::MagLevString >::cast(args->get(0))->getString();
HXLINE(  41)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::createAsync();
HXLINE(  42)			_gthis->auctionRepo->FindById(auctionId, ::Dynamic(new _hx_Closure_2(result)));
HXLINE(  52)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_5, ::englishauction::EnglishAuction,_gthis) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::maglev::MagLevResult,result) HXARGC(1)
            			void _hx_run( ::englishauction::AuctionModel auction){
            				HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_58_registerMyMethods)
HXLINE(  58)				if (::hx::IsNull( auction )) {
HXLINE(  59)					 ::maglev::MagLevError error = ::maglev::MagLevError_obj::create(0,HX_("auction not found",58,f7,69,1a),::maglev::MagLevNull_obj::create());
HXLINE(  60)					result->setError(error);
            				}
            				else {
HXLINE(  62)					int end = auction->end;
HXLINE(  63)					 ::maglev::MagLevNumber ret = ::maglev::MagLevNumber_obj::fromFloat(( (Float)(end) ));
HXLINE(  64)					result->setResult(ret);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_54_registerMyMethods)
HXLINE(  55)			::String auctionId = ::hx::TCast<  ::maglev::MagLevString >::cast(args->get(0))->getString();
HXLINE(  56)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::createAsync();
HXLINE(  57)			_gthis->auctionRepo->FindById(auctionId, ::Dynamic(new _hx_Closure_4(result)));
HXLINE(  67)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_7, ::englishauction::EnglishAuction,_gthis) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_6, ::maglev::MagLevResult,result) HXARGC(1)
            			void _hx_run( ::englishauction::AuctionModel auction){
            				HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_73_registerMyMethods)
HXLINE(  73)				if (::hx::IsNull( auction )) {
HXLINE(  74)					 ::maglev::MagLevError error = ::maglev::MagLevError_obj::create(0,HX_("auction not found",58,f7,69,1a),::maglev::MagLevNull_obj::create());
HXLINE(  75)					result->setError(error);
            				}
            				else {
HXLINE(  77)					Float start = ( (Float)(auction->start) );
HXLINE(  78)					Float now = (::Date_obj::now()->getTime() / ( (Float)(1000) ));
HXLINE(  79)					bool started = (start <= now);
HXLINE(  80)					 ::maglev::MagLevBoolean ret = ::maglev::MagLevBoolean_obj::fromBool(started);
HXLINE(  81)					result->setResult(ret);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_69_registerMyMethods)
HXLINE(  70)			::String auctionId = ::hx::TCast<  ::maglev::MagLevString >::cast(args->get(0))->getString();
HXLINE(  71)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::createAsync();
HXLINE(  72)			_gthis->auctionRepo->FindById(auctionId, ::Dynamic(new _hx_Closure_6(result)));
HXLINE(  84)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_9, ::englishauction::EnglishAuction,_gthis) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_8, ::maglev::MagLevResult,result) HXARGC(1)
            			void _hx_run( ::englishauction::AuctionModel auction){
            				HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_90_registerMyMethods)
HXLINE(  90)				if (::hx::IsNull( auction )) {
HXLINE(  91)					 ::maglev::MagLevError error = ::maglev::MagLevError_obj::create(0,HX_("auction not found",58,f7,69,1a),::maglev::MagLevNull_obj::create());
HXLINE(  92)					result->setError(error);
            				}
            				else {
HXLINE(  94)					Float end = ( (Float)(auction->end) );
HXLINE(  95)					Float now = (::Date_obj::now()->getTime() / ( (Float)(1000) ));
HXLINE(  96)					bool ended = (now > end);
HXLINE(  97)					 ::maglev::MagLevBoolean ret = ::maglev::MagLevBoolean_obj::fromBool(ended);
HXLINE(  98)					result->setResult(ret);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_86_registerMyMethods)
HXLINE(  87)			::String auctionId = ::hx::TCast<  ::maglev::MagLevString >::cast(args->get(0))->getString();
HXLINE(  88)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::createAsync();
HXLINE(  89)			_gthis->auctionRepo->FindById(auctionId, ::Dynamic(new _hx_Closure_8(result)));
HXLINE( 101)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_11, ::englishauction::EnglishAuction,_gthis) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_10, ::maglev::MagLevResult,result) HXARGC(1)
            			void _hx_run(::String id){
            				HX_GC_STACKFRAME(&_hx_pos_f704f8914f7b4676_113_registerMyMethods)
HXLINE( 113)				 ::maglev::MagLevResult result1 = result;
HXDLIN( 113)				result1->setResult(::maglev::MagLevString_obj::fromString(id));
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_GC_STACKFRAME(&_hx_pos_f704f8914f7b4676_103_registerMyMethods)
HXLINE( 104)			 ::maglev::MagLevString auctionId = ::hx::TCast<  ::maglev::MagLevString >::cast(args->get(0));
HXLINE( 105)			 ::maglev::MagLevString userId = ::hx::TCast<  ::maglev::MagLevString >::cast(args->get(1));
HXLINE( 106)			 ::maglev::MagLevNumber price = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(2));
HXLINE( 107)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::createAsync();
HXLINE( 108)			 ::englishauction::BidModel model =  ::englishauction::BidModel_obj::__alloc( HX_CTX );
HXLINE( 109)			model->auctionId = auctionId->getString();
HXLINE( 110)			model->userId = userId->getString();
HXLINE( 111)			model->price = price->getFloat();
HXLINE( 112)			_gthis->bidRepo->Add(model, ::Dynamic(new _hx_Closure_10(result)));
HXLINE( 115)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_14, ::maglev::MagLev,bus) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_12) HXARGC(1)
            			 ::maglev::MagLevResult _hx_run( ::maglev::MagLevError error){
            				HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_129_registerMyMethods)
HXLINE( 129)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(error->getMessage()));
HXDLIN( 129)				return null();
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_13, ::maglev::MagLevResult,myresult) HXARGC(1)
            			 ::maglev::MagLevResult _hx_run( ::maglev::MagLevAny res){
            				HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_131_registerMyMethods)
HXLINE( 132)				if (::Std_obj::isOfType(res,( ( ::Dynamic)(::hx::ClassOf< ::maglev::MagLevArray >()) ))) {
HXLINE( 133)					 ::maglev::MagLevArray resarr = ::hx::TCast<  ::maglev::MagLevArray >::cast(res);
HXLINE( 134)					if ((resarr->size() > 0)) {
HXLINE( 135)						 ::maglev::MagLevObject row = ( ( ::maglev::MagLevObject)(resarr->get(0)) );
HXLINE( 136)						 ::maglev::MagLevObject row2 = ::maglev::MagLevObject_obj::create();
HXLINE( 137)						row2->set(HX_("userId",06,3b,ef,41),row->get(HX_("userId",06,3b,ef,41)));
HXLINE( 138)						row2->set(HX_("price",89,4e,8b,c8),row->get(HX_("price",89,4e,8b,c8)));
HXLINE( 139)						myresult->setResult(row2);
            					}
            					else {
HXLINE( 141)						 ::maglev::MagLevResult myresult1 = myresult;
HXDLIN( 141)						myresult1->setResult(::maglev::MagLevNull_obj::create());
            					}
            				}
            				else {
HXLINE( 145)					 ::maglev::MagLevError error = ::maglev::MagLevError_obj::create(0,HX_("persistence getter did not return array",4b,24,e2,1e),::maglev::MagLevNull_obj::create());
HXLINE( 146)					myresult->setError(error);
            				}
HXLINE( 148)				return ::maglev::MagLevResult_obj::fromResult(::maglev::MagLevNull_obj::create());
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_117_registerMyMethods)
HXLINE( 118)			 ::maglev::MagLevString auctionId = ::hx::TCast<  ::maglev::MagLevString >::cast(args->get(0));
HXLINE( 119)			 ::maglev::MagLevArray myargs = ::maglev::MagLevArray_obj::create();
HXLINE( 120)			myargs->push(auctionId);
HXLINE( 121)			myargs->push(::maglev::MagLevNumber_obj::fromInt(1));
HXLINE( 122)			 ::maglev::MagLevArray myargs2 = ::maglev::MagLevArray_obj::create();
HXLINE( 123)			myargs2->push(::maglev::MagLevString_obj::fromString(HX_("EnglishAuction.Bid",c2,d3,e1,19)));
HXLINE( 124)			myargs2->push(::maglev::MagLevString_obj::fromString(HX_("FindByHighestPriceForAuction",0f,c3,2f,00)));
HXLINE( 125)			myargs2->push(myargs);
HXLINE( 126)			 ::maglev::MagLevResult ret = bus->call(HX_("Persistence.Get",c7,c3,56,12),myargs2);
HXLINE( 127)			 ::maglev::MagLevResult myresult = ::maglev::MagLevResult_obj::createAsync();
HXLINE( 128)			ret->onError( ::Dynamic(new _hx_Closure_12()));
HXLINE( 131)			ret->onResult( ::Dynamic(new _hx_Closure_13(myresult)));
HXLINE( 150)			return myresult;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_17, ::maglev::MagLev,bus) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_15) HXARGC(1)
            			 ::maglev::MagLevResult _hx_run( ::maglev::MagLevError error){
            				HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_165_registerMyMethods)
HXLINE( 165)				HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(error->getMessage()));
HXDLIN( 165)				return null();
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_16, ::maglev::MagLevResult,myresult) HXARGC(1)
            			 ::maglev::MagLevResult _hx_run( ::maglev::MagLevAny res){
            				HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_167_registerMyMethods)
HXLINE( 168)				 ::maglev::MagLevArray bids = ::maglev::MagLevArray_obj::create();
HXLINE( 169)				if (::Std_obj::isOfType(res,( ( ::Dynamic)(::hx::ClassOf< ::maglev::MagLevArray >()) ))) {
HXLINE( 170)					 ::maglev::MagLevArray resarr = ::hx::TCast<  ::maglev::MagLevArray >::cast(res);
HXLINE( 171)					int i = 0;
HXLINE( 172)					while((i < resarr->size())){
HXLINE( 173)						 ::maglev::MagLevObject row = ( ( ::maglev::MagLevObject)(resarr->get(i)) );
HXLINE( 174)						 ::maglev::MagLevObject row2 = ::maglev::MagLevObject_obj::create();
HXLINE( 175)						row2->set(HX_("userId",06,3b,ef,41),row->get(HX_("userId",06,3b,ef,41)));
HXLINE( 176)						row2->set(HX_("price",89,4e,8b,c8),row->get(HX_("price",89,4e,8b,c8)));
HXLINE( 177)						bids->push(row2);
HXLINE( 178)						i = (i + 1);
            					}
HXLINE( 180)					myresult->setResult(bids);
            				}
            				else {
HXLINE( 183)					 ::maglev::MagLevError error = ::maglev::MagLevError_obj::create(0,HX_("persistence getter did not return array",4b,24,e2,1e),::maglev::MagLevNull_obj::create());
HXLINE( 184)					myresult->setError(error);
            				}
HXLINE( 186)				return ::maglev::MagLevResult_obj::fromResult(::maglev::MagLevNull_obj::create());
            			}
            			HX_END_LOCAL_FUNC1(return)

            			HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_152_registerMyMethods)
HXLINE( 153)			 ::maglev::MagLevString auctionId = ::hx::TCast<  ::maglev::MagLevString >::cast(args->get(0));
HXLINE( 154)			 ::maglev::MagLevNumber numBids = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(1));
HXLINE( 155)			 ::maglev::MagLevArray myargs = ::maglev::MagLevArray_obj::create();
HXLINE( 156)			myargs->push(auctionId);
HXLINE( 157)			myargs->push(numBids);
HXLINE( 158)			 ::maglev::MagLevArray myargs2 = ::maglev::MagLevArray_obj::create();
HXLINE( 159)			myargs2->push(::maglev::MagLevString_obj::fromString(HX_("EnglishAuction.Bid",c2,d3,e1,19)));
HXLINE( 160)			myargs2->push(::maglev::MagLevString_obj::fromString(HX_("FindByHighestPriceForAuction",0f,c3,2f,00)));
HXLINE( 161)			myargs2->push(myargs);
HXLINE( 162)			 ::maglev::MagLevResult ret = bus->call(HX_("Persistence.Get",c7,c3,56,12),myargs2);
HXLINE( 163)			 ::maglev::MagLevResult myresult = ::maglev::MagLevResult_obj::createAsync();
HXLINE( 164)			ret->onError( ::Dynamic(new _hx_Closure_15()));
HXLINE( 167)			ret->onResult( ::Dynamic(new _hx_Closure_16(myresult)));
HXLINE( 188)			return myresult;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_19, ::englishauction::EnglishAuction,_gthis) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_18, ::maglev::MagLevResult,result) HXARGC(1)
            			void _hx_run(int numBids){
            				HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_194_registerMyMethods)
HXLINE( 194)				 ::maglev::MagLevResult result1 = result;
HXDLIN( 194)				result1->setResult(::maglev::MagLevNumber_obj::fromInt(numBids));
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_190_registerMyMethods)
HXLINE( 191)			::String auctionId = ::hx::TCast<  ::maglev::MagLevString >::cast(args->get(0))->getString();
HXLINE( 192)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::createAsync();
HXLINE( 193)			_gthis->bidRepo->GetNumberOfBids(auctionId, ::Dynamic(new _hx_Closure_18(result)));
HXLINE( 196)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_21, ::englishauction::EnglishAuction,_gthis) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_20, ::maglev::MagLevResult,result) HXARGC(1)
            			void _hx_run( ::englishauction::AuctionModel auction){
            				HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_202_registerMyMethods)
HXLINE( 202)				if (::hx::IsNull( auction )) {
HXLINE( 203)					 ::maglev::MagLevError error = ::maglev::MagLevError_obj::create(0,HX_("auction not found",58,f7,69,1a),::maglev::MagLevNull_obj::create());
HXLINE( 204)					result->setError(error);
            				}
            				else {
HXLINE( 206)					Float priceIncrement = auction->priceIncrement;
HXLINE( 207)					 ::maglev::MagLevNumber ret = ::maglev::MagLevNumber_obj::fromFloat(priceIncrement);
HXLINE( 208)					result->setResult(ret);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_198_registerMyMethods)
HXLINE( 199)			::String auctionId = ::hx::TCast<  ::maglev::MagLevString >::cast(args->get(0))->getString();
HXLINE( 200)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::createAsync();
HXLINE( 201)			_gthis->auctionRepo->FindById(auctionId, ::Dynamic(new _hx_Closure_20(result)));
HXLINE( 211)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_23, ::englishauction::EnglishAuction,_gthis) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_22, ::maglev::MagLevResult,result) HXARGC(1)
            			void _hx_run( ::englishauction::AuctionModel auction){
            				HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_217_registerMyMethods)
HXLINE( 217)				if (::hx::IsNull( auction )) {
HXLINE( 218)					 ::maglev::MagLevError error = ::maglev::MagLevError_obj::create(0,HX_("auction not found",58,f7,69,1a),::maglev::MagLevNull_obj::create());
HXLINE( 219)					result->setError(error);
            				}
            				else {
HXLINE( 221)					Float priceIncrement = auction->priceIncrement;
HXLINE( 222)					 ::maglev::MagLevNumber ret = ::maglev::MagLevNumber_obj::fromFloat(priceIncrement);
HXLINE( 223)					result->setResult(ret);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_213_registerMyMethods)
HXLINE( 214)			::String auctionId = ::hx::TCast<  ::maglev::MagLevString >::cast(args->get(0))->getString();
HXLINE( 215)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::createAsync();
HXLINE( 216)			_gthis->auctionRepo->FindById(auctionId, ::Dynamic(new _hx_Closure_22(result)));
HXLINE( 226)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_25, ::englishauction::EnglishAuction,_gthis) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_24, ::maglev::MagLevResult,result) HXARGC(1)
            			void _hx_run( ::englishauction::AuctionModel auction){
            				HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_232_registerMyMethods)
HXLINE( 232)				if (::hx::IsNull( auction )) {
HXLINE( 233)					 ::maglev::MagLevError error = ::maglev::MagLevError_obj::create(0,HX_("auction not found",58,f7,69,1a),::maglev::MagLevNull_obj::create());
HXLINE( 234)					result->setError(error);
            				}
            				else {
HXLINE( 236)					Float reservePrice = auction->reservePrice;
HXLINE( 237)					 ::maglev::MagLevNumber ret = ::maglev::MagLevNumber_obj::fromFloat(reservePrice);
HXLINE( 238)					result->setResult(ret);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_228_registerMyMethods)
HXLINE( 229)			::String auctionId = ::hx::TCast<  ::maglev::MagLevString >::cast(args->get(0))->getString();
HXLINE( 230)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::createAsync();
HXLINE( 231)			_gthis->auctionRepo->FindById(auctionId, ::Dynamic(new _hx_Closure_24(result)));
HXLINE( 241)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_27, ::englishauction::EnglishAuction,_gthis) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_26, ::maglev::MagLevResult,result) HXARGC(1)
            			void _hx_run( ::englishauction::AuctionModel auction){
            				HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_247_registerMyMethods)
HXLINE( 247)				if (::hx::IsNull( auction )) {
HXLINE( 248)					 ::maglev::MagLevError error = ::maglev::MagLevError_obj::create(0,HX_("auction not found",58,f7,69,1a),::maglev::MagLevNull_obj::create());
HXLINE( 249)					result->setError(error);
            				}
            				else {
HXLINE( 251)					Float startingPrice = auction->startingPrice;
HXLINE( 252)					 ::maglev::MagLevNumber ret = ::maglev::MagLevNumber_obj::fromFloat(startingPrice);
HXLINE( 253)					result->setResult(ret);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_243_registerMyMethods)
HXLINE( 244)			::String auctionId = ::hx::TCast<  ::maglev::MagLevString >::cast(args->get(0))->getString();
HXLINE( 245)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::createAsync();
HXLINE( 246)			_gthis->auctionRepo->FindById(auctionId, ::Dynamic(new _hx_Closure_26(result)));
HXLINE( 256)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_30, ::englishauction::EnglishAuction,_gthis) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_29, ::englishauction::EnglishAuction,_gthis,::String,auctionId, ::maglev::MagLevResult,result) HXARGC(1)
            			void _hx_run( ::englishauction::AuctionModel auction){
            				HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_262_registerMyMethods)
HXLINE( 262)				if (::hx::IsNull( auction )) {
HXLINE( 263)					 ::maglev::MagLevError error = ::maglev::MagLevError_obj::create(0,HX_("auction not found",58,f7,69,1a),::maglev::MagLevNull_obj::create());
HXLINE( 264)					result->setError(error);
            				}
            				else {
            					HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_28, ::englishauction::AuctionModel,auction, ::maglev::MagLevResult,result,::Array< Float >,highestBid) HXARGC(1)
            					void _hx_run(::Array< ::Dynamic> bids){
            						HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_267_registerMyMethods)
HXLINE( 268)						if ((bids->length > 0)) {
HXLINE( 269)							highestBid[0] = bids->__get(0).StaticCast<  ::englishauction::BidModel >()->price;
            						}
HXLINE( 272)						Float minBid = ((Float)0.00);
HXLINE( 273)						minBid = ::Math_obj::max(minBid,(highestBid->__get(0) + auction->priceIncrement));
HXLINE( 274)						minBid = ::Math_obj::max(minBid,auction->startingPrice);
HXLINE( 276)						 ::maglev::MagLevNumber ret = ::maglev::MagLevNumber_obj::fromFloat(minBid);
HXLINE( 277)						result->setResult(ret);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 266)					::Array< Float > highestBid = ::Array_obj< Float >::fromData( _hx_array_data_52939e0e_35,1);
HXLINE( 267)					_gthis->bidRepo->GetHighestBids(auctionId,1, ::Dynamic(new _hx_Closure_28(auction,result,highestBid)));
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_258_registerMyMethods)
HXLINE( 259)			::String auctionId = ::hx::TCast<  ::maglev::MagLevString >::cast(args->get(0))->getString();
HXLINE( 260)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::createAsync();
HXLINE( 261)			_gthis->auctionRepo->FindById(auctionId, ::Dynamic(new _hx_Closure_29(_gthis,auctionId,result)));
HXLINE( 281)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_32, ::englishauction::EnglishAuction,_gthis) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_31,int,now, ::maglev::MagLevResult,result) HXARGC(1)
            			void _hx_run( ::englishauction::AuctionModel auction){
            				HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_291_registerMyMethods)
HXLINE( 291)				if (::hx::IsNull( auction )) {
HXLINE( 292)					 ::maglev::MagLevError error = ::maglev::MagLevError_obj::create(0,HX_("auction not found",58,f7,69,1a),::maglev::MagLevNull_obj::create());
HXLINE( 293)					result->setError(error);
            				}
            				else {
HXLINE( 295)					int timeRemaining = ::Std_obj::_hx_int(( (Float)((auction->end - now)) ));
HXLINE( 296)					if ((timeRemaining < 0)) {
HXLINE( 297)						timeRemaining = 0;
            					}
HXLINE( 299)					 ::maglev::MagLevNumber ret = ::maglev::MagLevNumber_obj::fromInt(timeRemaining);
HXLINE( 300)					result->setResult(ret);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_283_registerMyMethods)
HXLINE( 284)			::String auctionId = ::hx::TCast<  ::maglev::MagLevString >::cast(args->get(0))->getString();
HXLINE( 285)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::createAsync();
HXLINE( 286)			int now = ::Std_obj::_hx_int(::Date_obj::now()->getTime());
HXLINE( 287)			if ((args->size() > 1)) {
HXLINE( 288)				now = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(1))->getInt();
            			}
HXLINE( 290)			_gthis->auctionRepo->FindById(auctionId, ::Dynamic(new _hx_Closure_31(now,result)));
HXLINE( 303)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_34, ::englishauction::EnglishAuction,_gthis) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_33, ::englishauction::EnglishAuction,_gthis, ::maglev::MagLevResult,result) HXARGC(1)
            			void _hx_run(::Array< ::Dynamic> auctions){
            				HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_321_registerMyMethods)
HXLINE( 322)				 ::maglev::MagLevArray results = ::maglev::MagLevArray_obj::create();
HXLINE( 323)				{
HXLINE( 323)					int _g = 0;
HXDLIN( 323)					while((_g < auctions->length)){
HXLINE( 323)						 ::englishauction::AuctionModel auction = auctions->__get(_g).StaticCast<  ::englishauction::AuctionModel >();
HXDLIN( 323)						_g = (_g + 1);
HXLINE( 324)						 ::maglev::MagLevObject result = _gthis->auctionModelToMagLevObject(auction);
HXLINE( 325)						results->push(result);
            					}
            				}
HXLINE( 327)				result->setResult(results);
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_307_registerMyMethods)
HXLINE( 308)			int endfrom = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(0))->getInt();
HXLINE( 309)			int endto = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(1))->getInt();
HXLINE( 310)			int page = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(2))->getInt();
HXLINE( 311)			int perpage = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(3))->getInt();
HXLINE( 312)			::String sort = HX_("end",db,03,4d,00);
HXLINE( 313)			bool asc = true;
HXLINE( 314)			if ((args->size() > 4)) {
HXLINE( 315)				sort = ::hx::TCast<  ::maglev::MagLevString >::cast(args->get(4))->getString();
            			}
HXLINE( 317)			if ((args->size() > 5)) {
HXLINE( 318)				asc = ::hx::TCast<  ::maglev::MagLevBoolean >::cast(args->get(5))->getBool();
            			}
HXLINE( 320)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::createAsync();
HXLINE( 321)			_gthis->auctionRepo->FindAuctionsEnding(endfrom,endto,page,perpage,sort,asc, ::Dynamic(new _hx_Closure_33(_gthis,result)));
HXLINE( 329)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_36, ::englishauction::EnglishAuction,_gthis) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_35, ::englishauction::EnglishAuction,_gthis, ::maglev::MagLevResult,result) HXARGC(1)
            			void _hx_run(::Array< ::Dynamic> auctions){
            				HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_345_registerMyMethods)
HXLINE( 346)				 ::maglev::MagLevArray results = ::maglev::MagLevArray_obj::create();
HXLINE( 347)				{
HXLINE( 347)					int _g = 0;
HXDLIN( 347)					while((_g < auctions->length)){
HXLINE( 347)						 ::englishauction::AuctionModel auction = auctions->__get(_g).StaticCast<  ::englishauction::AuctionModel >();
HXDLIN( 347)						_g = (_g + 1);
HXLINE( 348)						 ::maglev::MagLevObject result = _gthis->auctionModelToMagLevObject(auction);
HXLINE( 349)						results->push(result);
            					}
            				}
HXLINE( 351)				result->setResult(results);
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_331_registerMyMethods)
HXLINE( 332)			int endfrom = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(0))->getInt();
HXLINE( 333)			int endto = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(1))->getInt();
HXLINE( 334)			int page = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(2))->getInt();
HXLINE( 335)			int perpage = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(3))->getInt();
HXLINE( 336)			::String sort = HX_("end",db,03,4d,00);
HXLINE( 337)			bool asc = true;
HXLINE( 338)			if ((args->size() > 4)) {
HXLINE( 339)				sort = ::hx::TCast<  ::maglev::MagLevString >::cast(args->get(4))->getString();
            			}
HXLINE( 341)			if ((args->size() > 5)) {
HXLINE( 342)				asc = ::hx::TCast<  ::maglev::MagLevBoolean >::cast(args->get(5))->getBool();
            			}
HXLINE( 344)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::createAsync();
HXLINE( 345)			_gthis->auctionRepo->FindAuctionsStarting(endfrom,endto,page,perpage,sort,asc, ::Dynamic(new _hx_Closure_35(_gthis,result)));
HXLINE( 353)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_38, ::englishauction::EnglishAuction,_gthis) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_37, ::englishauction::EnglishAuction,_gthis, ::maglev::MagLevResult,result) HXARGC(1)
            			void _hx_run(::Array< ::Dynamic> auctions){
            				HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_367_registerMyMethods)
HXLINE( 368)				 ::maglev::MagLevArray results = ::maglev::MagLevArray_obj::create();
HXLINE( 369)				{
HXLINE( 369)					int _g = 0;
HXDLIN( 369)					while((_g < auctions->length)){
HXLINE( 369)						 ::englishauction::AuctionModel auction = auctions->__get(_g).StaticCast<  ::englishauction::AuctionModel >();
HXDLIN( 369)						_g = (_g + 1);
HXLINE( 370)						 ::maglev::MagLevObject result = _gthis->auctionModelToMagLevObject(auction);
HXLINE( 371)						results->push(result);
            					}
            				}
HXLINE( 373)				result->setResult(results);
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_355_registerMyMethods)
HXLINE( 356)			int page = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(0))->getInt();
HXLINE( 357)			int perpage = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(1))->getInt();
HXLINE( 358)			::String sort = HX_("end",db,03,4d,00);
HXLINE( 359)			bool asc = true;
HXLINE( 360)			if ((args->size() > 2)) {
HXLINE( 361)				sort = ::hx::TCast<  ::maglev::MagLevString >::cast(args->get(2))->getString();
            			}
HXLINE( 363)			if ((args->size() > 3)) {
HXLINE( 364)				asc = ::hx::TCast<  ::maglev::MagLevBoolean >::cast(args->get(3))->getBool();
            			}
HXLINE( 366)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::createAsync();
HXLINE( 367)			_gthis->auctionRepo->FindOpenAuctions(page,perpage,sort,asc, ::Dynamic(new _hx_Closure_37(_gthis,result)));
HXLINE( 375)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_23_registerMyMethods)
HXDLIN(  23)		 ::englishauction::EnglishAuction _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  24)		 ::maglev::MagLev bus = this->maglev;
HXLINE(  25)		 ::maglev::MagLev _hx_tmp = this->maglev;
HXDLIN(  25)		_hx_tmp->_hx_register(HX_("EnglishAuction.Create",17,3d,e9,16),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_1(_gthis))));
HXLINE(  39)		 ::maglev::MagLev _hx_tmp1 = this->maglev;
HXDLIN(  39)		_hx_tmp1->_hx_register(HX_("EnglishAuction.GetStart",c7,56,72,49),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_3(_gthis))));
HXLINE(  54)		 ::maglev::MagLev _hx_tmp2 = this->maglev;
HXDLIN(  54)		_hx_tmp2->_hx_register(HX_("EnglishAuction.GetEnd",00,13,f6,3d),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_5(_gthis))));
HXLINE(  69)		 ::maglev::MagLev _hx_tmp3 = this->maglev;
HXDLIN(  69)		_hx_tmp3->_hx_register(HX_("EnglishAuction.HasStarted",a2,90,1d,87),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_7(_gthis))));
HXLINE(  86)		 ::maglev::MagLev _hx_tmp4 = this->maglev;
HXDLIN(  86)		_hx_tmp4->_hx_register(HX_("EnglishAuction.HasEnded",1b,66,62,62),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_9(_gthis))));
HXLINE( 103)		 ::maglev::MagLev _hx_tmp5 = this->maglev;
HXDLIN( 103)		_hx_tmp5->_hx_register(HX_("EnglishAuction.Bid",c2,d3,e1,19),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_11(_gthis))));
HXLINE( 117)		 ::maglev::MagLev _hx_tmp6 = this->maglev;
HXDLIN( 117)		_hx_tmp6->_hx_register(HX_("EnglishAuction.GetHighestBidder",dd,e5,73,16),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_14(bus))));
HXLINE( 152)		 ::maglev::MagLev _hx_tmp7 = this->maglev;
HXDLIN( 152)		_hx_tmp7->_hx_register(HX_("EnglishAuction.GetHighestBids",7f,51,a8,de),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_17(bus))));
HXLINE( 190)		 ::maglev::MagLev _hx_tmp8 = this->maglev;
HXDLIN( 190)		_hx_tmp8->_hx_register(HX_("EnglishAuction.GetNumberOfBids",b1,6d,7e,c5),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_19(_gthis))));
HXLINE( 198)		 ::maglev::MagLev _hx_tmp9 = this->maglev;
HXDLIN( 198)		_hx_tmp9->_hx_register(HX_("EnglishAuction.GetPriceIncrement",61,27,55,b3),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_21(_gthis))));
HXLINE( 213)		 ::maglev::MagLev _hx_tmp10 = this->maglev;
HXDLIN( 213)		_hx_tmp10->_hx_register(HX_("EnglishAuction.GetPriceIncrement",61,27,55,b3),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_23(_gthis))));
HXLINE( 228)		 ::maglev::MagLev _hx_tmp11 = this->maglev;
HXDLIN( 228)		_hx_tmp11->_hx_register(HX_("EnglishAuction.GetReservePrice",e8,8a,d1,87),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_25(_gthis))));
HXLINE( 243)		 ::maglev::MagLev _hx_tmp12 = this->maglev;
HXDLIN( 243)		_hx_tmp12->_hx_register(HX_("EnglishAuction.GetStartingPrice",0e,b4,c5,fc),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_27(_gthis))));
HXLINE( 258)		 ::maglev::MagLev _hx_tmp13 = this->maglev;
HXDLIN( 258)		_hx_tmp13->_hx_register(HX_("EnglishAuction.CalcMinimumBid",9f,31,3e,2b),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_30(_gthis))));
HXLINE( 283)		 ::maglev::MagLev _hx_tmp14 = this->maglev;
HXDLIN( 283)		_hx_tmp14->_hx_register(HX_("EnglishAuction.CalcTimeRemaining",19,a9,a9,bb),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_32(_gthis))));
HXLINE( 307)		 ::maglev::MagLev _hx_tmp15 = this->maglev;
HXDLIN( 307)		_hx_tmp15->_hx_register(HX_("EnglishAuction.GetAuctionsEnding",d2,45,aa,35),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_34(_gthis))));
HXLINE( 331)		 ::maglev::MagLev _hx_tmp16 = this->maglev;
HXDLIN( 331)		_hx_tmp16->_hx_register(HX_("EnglishAuction.GetAuctionsStarting",6b,34,ea,c2),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_36(_gthis))));
HXLINE( 355)		 ::maglev::MagLev _hx_tmp17 = this->maglev;
HXDLIN( 355)		_hx_tmp17->_hx_register(HX_("EnglishAuction.GetOpenAuctions",f5,86,16,fe),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_38(_gthis))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(EnglishAuction_obj,registerMyMethods,(void))

 ::maglev::MagLevObject EnglishAuction_obj::auctionModelToMagLevObject( ::englishauction::AuctionModel m){
            	HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_386_auctionModelToMagLevObject)
HXLINE( 387)		 ::maglev::MagLevObject o = ::maglev::MagLevObject_obj::create();
HXLINE( 388)		o->set(HX_("auctionId",fe,08,7f,46),::maglev::MagLevString_obj::fromString(m->id));
HXLINE( 389)		o->set(HX_("start",62,74,0b,84),::maglev::MagLevNumber_obj::fromInt(m->start));
HXLINE( 390)		o->set(HX_("end",db,03,4d,00),::maglev::MagLevNumber_obj::fromInt(m->end));
HXLINE( 391)		o->set(HX_("startingPrice",a9,64,6e,09),::maglev::MagLevNumber_obj::fromFloat(m->startingPrice));
HXLINE( 392)		o->set(HX_("reservePrice",ad,26,d1,1a),::maglev::MagLevNumber_obj::fromFloat(m->reservePrice));
HXLINE( 393)		o->set(HX_("priceIncrement",66,fe,46,ba),::maglev::MagLevNumber_obj::fromFloat(m->priceIncrement));
HXLINE( 394)		return o;
            	}


HX_DEFINE_DYNAMIC_FUNC1(EnglishAuction_obj,auctionModelToMagLevObject,return )

 ::Dynamic EnglishAuction_obj::convertToHaxe( ::maglev::MagLevAny x){
            	HX_GC_STACKFRAME(&_hx_pos_f704f8914f7b4676_398_convertToHaxe)
HXDLIN( 398)		int _hx_tmp = x->getType();
HXDLIN( 398)		if ((_hx_tmp == ::maglev::MagLevNull_obj::getStaticType())) {
HXLINE( 399)			return null();
            		}
            		else {
HXLINE( 401)			int _hx_tmp = x->getType();
HXDLIN( 401)			if ((_hx_tmp == ::maglev::MagLevBoolean_obj::getStaticType())) {
HXLINE( 402)				 ::maglev::MagLevBoolean y = ::hx::TCast<  ::maglev::MagLevBoolean >::cast(x);
HXLINE( 403)				return y->getBool();
            			}
            			else {
HXLINE( 405)				int _hx_tmp = x->getType();
HXDLIN( 405)				if ((_hx_tmp == ::maglev::MagLevString_obj::getStaticType())) {
HXLINE( 406)					 ::maglev::MagLevString y = ::hx::TCast<  ::maglev::MagLevString >::cast(x);
HXLINE( 407)					return y->getString();
            				}
            				else {
HXLINE( 409)					int _hx_tmp = x->getType();
HXDLIN( 409)					if ((_hx_tmp == ::maglev::MagLevNumber_obj::getStaticType())) {
HXLINE( 410)						 ::maglev::MagLevNumber y = ::hx::TCast<  ::maglev::MagLevNumber >::cast(x);
HXLINE( 411)						return y->getFloat();
            					}
            					else {
HXLINE( 413)						int _hx_tmp = x->getType();
HXDLIN( 413)						if ((_hx_tmp == ::maglev::MagLevArray_obj::getStaticType())) {
HXLINE( 414)							 ::maglev::MagLevArray y = ::hx::TCast<  ::maglev::MagLevArray >::cast(x);
HXLINE( 415)							::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new();
HXLINE( 416)							int i = 0;
HXLINE( 417)							while((i < y->size())){
HXLINE( 418)								arr->push(this->convertToHaxe(y->get(i)));
            							}
HXLINE( 420)							return arr;
            						}
            						else {
HXLINE( 422)							int _hx_tmp = x->getType();
HXDLIN( 422)							if ((_hx_tmp == ::maglev::MagLevObject_obj::getStaticType())) {
HXLINE( 423)								 ::maglev::MagLevObject y = ::hx::TCast<  ::maglev::MagLevObject >::cast(x);
HXLINE( 424)								 ::haxe::ds::StringMap map =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 425)								 ::maglev::MagLevArray keys = y->keys();
HXLINE( 426)								int i = 0;
HXLINE( 427)								while((i < keys->size())){
HXLINE( 428)									::String key = ::hx::TCast<  ::maglev::MagLevString >::cast(keys->get(i))->getString();
HXLINE( 429)									map->set(key,this->convertToHaxe(y->get(key)));
            								}
HXLINE( 431)								return map;
            							}
            							else {
HXLINE( 434)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("convertToHaxe: unknown type",4a,83,07,f2)));
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 398)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(EnglishAuction_obj,convertToHaxe,return )

 ::maglev::MagLevAny EnglishAuction_obj::convertToMagLev( ::Dynamic x){
            	HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_439_convertToMagLev)
HXDLIN( 439)		if (::hx::IsNull( x )) {
HXLINE( 440)			return ::maglev::MagLevNull_obj::create();
            		}
            		else {
HXLINE( 442)			if (::Std_obj::isOfType(x,( ( ::Dynamic)(::hx::ClassOf< bool >()) ))) {
HXLINE( 443)				return ::maglev::MagLevBoolean_obj::fromBool(::hx::TCast< bool >::cast(x));
            			}
            			else {
HXLINE( 445)				if (::Std_obj::isOfType(x,( ( ::Dynamic)(::hx::ClassOf< ::String >()) ))) {
HXLINE( 446)					return ::maglev::MagLevString_obj::fromString(::hx::TCast< ::String >::cast(x));
            				}
            				else {
HXLINE( 448)					if (::Std_obj::isOfType(x,( ( ::Dynamic)(::hx::ClassOf< int >()) ))) {
HXLINE( 449)						return ::maglev::MagLevNumber_obj::fromInt(::hx::TCast< int >::cast(x));
            					}
            					else {
HXLINE( 451)						if (::Std_obj::isOfType(x,( ( ::Dynamic)(::hx::ClassOf< ::Float >()) ))) {
HXLINE( 452)							return ::maglev::MagLevNumber_obj::fromFloat(( (Float)(x) ));
            						}
            						else {
HXLINE( 454)							if (::Std_obj::isOfType(x,( ( ::Dynamic)(::hx::ArrayBase::__mClass) ))) {
HXLINE( 455)								 ::maglev::MagLevArray arr = ::maglev::MagLevArray_obj::create();
HXLINE( 456)								::cpp::VirtualArray y = ( (::cpp::VirtualArray)(x) );
HXLINE( 457)								{
HXLINE( 457)									int _g = 0;
HXDLIN( 457)									while((_g < y->get_length())){
HXLINE( 457)										 ::Dynamic item = y->__get(_g);
HXDLIN( 457)										_g = (_g + 1);
HXLINE( 458)										arr->push(this->convertToMagLev(item));
            									}
            								}
HXLINE( 460)								return arr;
            							}
            							else {
HXLINE( 462)								if (::Std_obj::isOfType(x,( ( ::Dynamic)(::hx::ClassOf< ::haxe::ds::StringMap >()) ))) {
HXLINE( 463)									 ::haxe::ds::StringMap map = ( ( ::haxe::ds::StringMap)(x) );
HXLINE( 464)									 ::maglev::MagLevObject obj = ::maglev::MagLevObject_obj::create();
HXLINE( 465)									{
HXLINE( 465)										 ::Dynamic key = map->keys();
HXDLIN( 465)										while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 465)											::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 466)											obj->set(key1,this->convertToMagLev(map->get(key1)));
            										}
            									}
HXLINE( 468)									return obj;
            								}
            								else {
HXLINE( 470)									if (::Reflect_obj::isObject(x)) {
HXLINE( 471)										 ::maglev::MagLevObject obj = ::maglev::MagLevObject_obj::create();
HXLINE( 472)										{
HXLINE( 472)											int _g = 0;
HXDLIN( 472)											::Array< ::String > _g1 = ::Reflect_obj::fields(x);
HXDLIN( 472)											while((_g < _g1->length)){
HXLINE( 472)												::String field = _g1->__get(_g);
HXDLIN( 472)												_g = (_g + 1);
HXLINE( 473)												 ::Dynamic val = ::Reflect_obj::getProperty(x,field);
HXLINE( 474)												obj->set(field,this->convertToMagLev(val));
            											}
            										}
HXLINE( 476)										return obj;
            									}
            									else {
HXLINE( 478)										if (::Reflect_obj::isFunction(x)) {
HXLINE( 479)											 ::Dynamic f = x;
HXLINE( 480)											return ::maglev::MagLevFunction_obj::fromFunction(f);
            										}
            										else {
HXLINE( 483)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("convertToMagLev: unknown type",ae,84,a9,64)));
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 439)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(EnglishAuction_obj,convertToMagLev,return )


::hx::ObjectPtr< EnglishAuction_obj > EnglishAuction_obj::__new( ::maglev::MagLev maglev) {
	::hx::ObjectPtr< EnglishAuction_obj > __this = new EnglishAuction_obj();
	__this->__construct(maglev);
	return __this;
}

::hx::ObjectPtr< EnglishAuction_obj > EnglishAuction_obj::__alloc(::hx::Ctx *_hx_ctx, ::maglev::MagLev maglev) {
	EnglishAuction_obj *__this = (EnglishAuction_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(EnglishAuction_obj), true, "englishauction.EnglishAuction"));
	*(void **)__this = EnglishAuction_obj::_hx_vtable;
	__this->__construct(maglev);
	return __this;
}

EnglishAuction_obj::EnglishAuction_obj()
{
}

void EnglishAuction_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(EnglishAuction);
	HX_MARK_MEMBER_NAME(maglev,"maglev");
	HX_MARK_MEMBER_NAME(auctionRepo,"auctionRepo");
	HX_MARK_MEMBER_NAME(bidRepo,"bidRepo");
	HX_MARK_END_CLASS();
}

void EnglishAuction_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(maglev,"maglev");
	HX_VISIT_MEMBER_NAME(auctionRepo,"auctionRepo");
	HX_VISIT_MEMBER_NAME(bidRepo,"bidRepo");
}

::hx::Val EnglishAuction_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"maglev") ) { return ::hx::Val( maglev ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"bidRepo") ) { return ::hx::Val( bidRepo ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"auctionRepo") ) { return ::hx::Val( auctionRepo ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"convertToHaxe") ) { return ::hx::Val( convertToHaxe_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"convertToMagLev") ) { return ::hx::Val( convertToMagLev_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"registerMyMethods") ) { return ::hx::Val( registerMyMethods_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"auctionModelToMagLevObject") ) { return ::hx::Val( auctionModelToMagLevObject_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val EnglishAuction_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"maglev") ) { maglev=inValue.Cast<  ::maglev::MagLev >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"bidRepo") ) { bidRepo=inValue.Cast<  ::englishauction::BidRepository >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"auctionRepo") ) { auctionRepo=inValue.Cast<  ::englishauction::AuctionRepository >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void EnglishAuction_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("maglev",2a,df,2b,b3));
	outFields->push(HX_("auctionRepo",55,d4,05,31));
	outFields->push(HX_("bidRepo",cf,df,42,b1));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo EnglishAuction_obj_sMemberStorageInfo[] = {
	{::hx::fsUnknown /*  ::maglev::MagLev */ ,(int)offsetof(EnglishAuction_obj,maglev),HX_("maglev",2a,df,2b,b3)},
	{::hx::fsObject /*  ::englishauction::AuctionRepository */ ,(int)offsetof(EnglishAuction_obj,auctionRepo),HX_("auctionRepo",55,d4,05,31)},
	{::hx::fsObject /*  ::englishauction::BidRepository */ ,(int)offsetof(EnglishAuction_obj,bidRepo),HX_("bidRepo",cf,df,42,b1)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *EnglishAuction_obj_sStaticStorageInfo = 0;
#endif

static ::String EnglishAuction_obj_sMemberFields[] = {
	HX_("maglev",2a,df,2b,b3),
	HX_("auctionRepo",55,d4,05,31),
	HX_("bidRepo",cf,df,42,b1),
	HX_("registerMyMethods",83,b1,0a,b9),
	HX_("auctionModelToMagLevObject",8a,b4,95,0c),
	HX_("convertToHaxe",94,89,1b,b6),
	HX_("convertToMagLev",f8,a3,b9,0f),
	::String(null()) };

::hx::Class EnglishAuction_obj::__mClass;

void EnglishAuction_obj::__register()
{
	EnglishAuction_obj _hx_dummy;
	EnglishAuction_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("englishauction.EnglishAuction",0e,9e,93,52);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(EnglishAuction_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< EnglishAuction_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EnglishAuction_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EnglishAuction_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void EnglishAuction_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_f704f8914f7b4676_11_boot)
HXDLIN(  11)		__mClass->__meta__ =  ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("obj",f7,8f,54,00), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("SuppressWarnings",0c,d3,d2,00),::cpp::VirtualArray_obj::__new(1)->init(0,::cpp::VirtualArray_obj::__new(4)->init(0,HX_("checkstyle:FieldDocComment",70,56,1b,20))->init(1,HX_("checkstyle:LocalVariableName",c1,ac,a3,03))->init(2,HX_("checkstyle:MultipleStringLiterals",d6,ed,13,79))->init(3,HX_("checkstyle:MagicNumber",a5,aa,f4,8b)))))));
            	}
}

} // end namespace englishauction
