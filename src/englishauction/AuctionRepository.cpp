// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_16d41c6fc5b8bf5d
#define INCLUDED_16d41c6fc5b8bf5d
#include "maglev/MagLev.h"
#endif
#ifndef INCLUDED_869a921fcf5bba54
#define INCLUDED_869a921fcf5bba54
#include "maglev/MagLevAny.h"
#endif
#ifndef INCLUDED_20db69a30a45e926
#define INCLUDED_20db69a30a45e926
#include "maglev/MagLevArray.h"
#endif
#ifndef INCLUDED_35ec03520fbb0747
#define INCLUDED_35ec03520fbb0747
#include "maglev/MagLevBoolean.h"
#endif
#ifndef INCLUDED_d8a74f90a5c0b964
#define INCLUDED_d8a74f90a5c0b964
#include "maglev/MagLevError.h"
#endif
#ifndef INCLUDED_ba46386e6aba7150
#define INCLUDED_ba46386e6aba7150
#include "maglev/MagLevNull.h"
#endif
#ifndef INCLUDED_95fa5e9194badcf5
#define INCLUDED_95fa5e9194badcf5
#include "maglev/MagLevNumber.h"
#endif
#ifndef INCLUDED_f4da16f85a617f60
#define INCLUDED_f4da16f85a617f60
#include "maglev/MagLevObject.h"
#endif
#ifndef INCLUDED_65acb6100057af6e
#define INCLUDED_65acb6100057af6e
#include "maglev/MagLevResult.h"
#endif
#ifndef INCLUDED_c859d2752ef86c43
#define INCLUDED_c859d2752ef86c43
#include "maglev/MagLevString.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_englishauction_AuctionModel
#include <englishauction/AuctionModel.h>
#endif
#ifndef INCLUDED_englishauction_AuctionRepository
#include <englishauction/AuctionRepository.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2c69b47eb41d373d_10_new,"englishauction.AuctionRepository","new",0x52210764,"englishauction.AuctionRepository.new","englishauction/AuctionRepository.hx",10,0xd2c1570d)
HX_LOCAL_STACK_FRAME(_hx_pos_2c69b47eb41d373d_13_Add,"englishauction.AuctionRepository","Add",0x51fee105,"englishauction.AuctionRepository.Add","englishauction/AuctionRepository.hx",13,0xd2c1570d)
HX_LOCAL_STACK_FRAME(_hx_pos_2c69b47eb41d373d_17_Edit,"englishauction.AuctionRepository","Edit",0x6faae2a6,"englishauction.AuctionRepository.Edit","englishauction/AuctionRepository.hx",17,0xd2c1570d)
HX_LOCAL_STACK_FRAME(_hx_pos_2c69b47eb41d373d_21_Remove,"englishauction.AuctionRepository","Remove",0xa2d113e0,"englishauction.AuctionRepository.Remove","englishauction/AuctionRepository.hx",21,0xd2c1570d)
HX_LOCAL_STACK_FRAME(_hx_pos_2c69b47eb41d373d_25_FindById,"englishauction.AuctionRepository","FindById",0xaec19d07,"englishauction.AuctionRepository.FindById","englishauction/AuctionRepository.hx",25,0xd2c1570d)
HX_LOCAL_STACK_FRAME(_hx_pos_2c69b47eb41d373d_50_FindAuctionsEnding,"englishauction.AuctionRepository","FindAuctionsEnding",0x9fab848c,"englishauction.AuctionRepository.FindAuctionsEnding","englishauction/AuctionRepository.hx",50,0xd2c1570d)
HX_LOCAL_STACK_FRAME(_hx_pos_2c69b47eb41d373d_81_FindAuctionsStarting,"englishauction.AuctionRepository","FindAuctionsStarting",0x9ec415a5,"englishauction.AuctionRepository.FindAuctionsStarting","englishauction/AuctionRepository.hx",81,0xd2c1570d)
HX_LOCAL_STACK_FRAME(_hx_pos_2c69b47eb41d373d_112_FindOpenAuctions,"englishauction.AuctionRepository","FindOpenAuctions",0xeae4c32f,"englishauction.AuctionRepository.FindOpenAuctions","englishauction/AuctionRepository.hx",112,0xd2c1570d)
namespace englishauction{

void AuctionRepository_obj::__construct( ::maglev::MagLev bus){
            	HX_STACKFRAME(&_hx_pos_2c69b47eb41d373d_10_new)
HXDLIN(  10)		this->bus = bus;
            	}

Dynamic AuctionRepository_obj::__CreateEmpty() { return new AuctionRepository_obj; }

void *AuctionRepository_obj::_hx_vtable = 0;

Dynamic AuctionRepository_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AuctionRepository_obj > _hx_result = new AuctionRepository_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool AuctionRepository_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5dbb38da;
}

void AuctionRepository_obj::Add( ::englishauction::AuctionModel auction){
            	HX_STACKFRAME(&_hx_pos_2c69b47eb41d373d_13_Add)
            	}


HX_DEFINE_DYNAMIC_FUNC1(AuctionRepository_obj,Add,(void))

void AuctionRepository_obj::Edit( ::englishauction::AuctionModel auction){
            	HX_STACKFRAME(&_hx_pos_2c69b47eb41d373d_17_Edit)
            	}


HX_DEFINE_DYNAMIC_FUNC1(AuctionRepository_obj,Edit,(void))

void AuctionRepository_obj::Remove(::String auctionId){
            	HX_STACKFRAME(&_hx_pos_2c69b47eb41d373d_21_Remove)
            	}


HX_DEFINE_DYNAMIC_FUNC1(AuctionRepository_obj,Remove,(void))

 ::englishauction::AuctionModel AuctionRepository_obj::FindById(::String auctionId){
            	HX_GC_STACKFRAME(&_hx_pos_2c69b47eb41d373d_25_FindById)
HXLINE(  26)		 ::maglev::MagLevArray myargs = ::maglev::MagLevArray_obj::create();
HXLINE(  27)		myargs->push(::maglev::MagLevString_obj::fromString(HX_("EnglishAuction.Auction",c8,f3,cc,ba)));
HXLINE(  28)		myargs->push(::maglev::MagLevString_obj::fromString(HX_("FindById",8b,c2,68,6d)));
HXLINE(  29)		 ::maglev::MagLevArray myargs2 = ::maglev::MagLevArray_obj::create();
HXLINE(  30)		myargs2->push(::maglev::MagLevString_obj::fromString(auctionId));
HXLINE(  31)		myargs->push(myargs2);
HXLINE(  32)		 ::maglev::MagLevResult res = this->bus->call(HX_("Persistence.Get",c7,c3,56,12),myargs);
HXLINE(  33)		if (res->isError()) {
HXLINE(  34)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(res->getError()->getMessage()));
            		}
HXLINE(  36)		if (::Std_obj::isOfType(res->getResult(),( ( ::Dynamic)(::hx::ClassOf< ::maglev::MagLevNull >()) ))) {
HXLINE(  37)			return null();
            		}
HXLINE(  39)		 ::maglev::MagLevObject resobj = ::hx::TCast<  ::maglev::MagLevObject >::cast(res->getResult());
HXLINE(  40)		 ::englishauction::AuctionModel model =  ::englishauction::AuctionModel_obj::__alloc( HX_CTX );
HXLINE(  41)		model->id = ::hx::TCast<  ::maglev::MagLevString >::cast(resobj->get(HX_("auctionId",fe,08,7f,46)))->getString();
HXLINE(  42)		model->start = ::hx::TCast<  ::maglev::MagLevNumber >::cast(resobj->get(HX_("start",62,74,0b,84)))->getInt();
HXLINE(  43)		model->end = ::hx::TCast<  ::maglev::MagLevNumber >::cast(resobj->get(HX_("end",db,03,4d,00)))->getInt();
HXLINE(  44)		model->startingPrice = ::hx::TCast<  ::maglev::MagLevNumber >::cast(resobj->get(HX_("startingPrice",a9,64,6e,09)))->getFloat();
HXLINE(  45)		model->reservePrice = ::hx::TCast<  ::maglev::MagLevNumber >::cast(resobj->get(HX_("reservePrice",ad,26,d1,1a)))->getFloat();
HXLINE(  46)		model->priceIncrement = ::hx::TCast<  ::maglev::MagLevNumber >::cast(resobj->get(HX_("priceIncrement",66,fe,46,ba)))->getFloat();
HXLINE(  47)		return model;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AuctionRepository_obj,FindById,return )

::Array< ::Dynamic> AuctionRepository_obj::FindAuctionsEnding(int endfrom,int endto,int page,int perpage,::String sort,bool asc){
            	HX_GC_STACKFRAME(&_hx_pos_2c69b47eb41d373d_50_FindAuctionsEnding)
HXLINE(  51)		::Array< ::Dynamic> auctions = ::Array_obj< ::Dynamic>::__new();
HXLINE(  52)		 ::maglev::MagLevArray myargs = ::maglev::MagLevArray_obj::create();
HXLINE(  53)		myargs->push(::maglev::MagLevString_obj::fromString(HX_("EnglishAuction.Auction",c8,f3,cc,ba)));
HXLINE(  54)		myargs->push(::maglev::MagLevString_obj::fromString(HX_("FindEnding",20,5d,8d,1a)));
HXLINE(  55)		 ::maglev::MagLevArray myargs2 = ::maglev::MagLevArray_obj::create();
HXLINE(  56)		myargs2->push(::maglev::MagLevNumber_obj::fromInt(endfrom));
HXLINE(  57)		myargs2->push(::maglev::MagLevNumber_obj::fromInt(endto));
HXLINE(  58)		myargs2->push(::maglev::MagLevNumber_obj::fromInt(page));
HXLINE(  59)		myargs2->push(::maglev::MagLevNumber_obj::fromInt(perpage));
HXLINE(  60)		myargs2->push(::maglev::MagLevString_obj::fromString(sort));
HXLINE(  61)		myargs2->push(::maglev::MagLevBoolean_obj::fromBool(asc));
HXLINE(  62)		myargs->push(myargs2);
HXLINE(  63)		 ::maglev::MagLevResult res = this->bus->call(HX_("Persistence.Get",c7,c3,56,12),myargs);
HXLINE(  64)		 ::maglev::MagLevArray arr = ::hx::TCast<  ::maglev::MagLevArray >::cast(res->getResult());
HXLINE(  65)		int i = 0;
HXLINE(  66)		while((i < arr->size())){
HXLINE(  67)			 ::englishauction::AuctionModel model =  ::englishauction::AuctionModel_obj::__alloc( HX_CTX );
HXLINE(  68)			 ::maglev::MagLevObject resobj = ::hx::TCast<  ::maglev::MagLevObject >::cast(arr->get(i));
HXLINE(  69)			model->id = ::hx::TCast<  ::maglev::MagLevString >::cast(resobj->get(HX_("auctionId",fe,08,7f,46)))->getString();
HXLINE(  70)			model->start = ::hx::TCast<  ::maglev::MagLevNumber >::cast(resobj->get(HX_("start",62,74,0b,84)))->getInt();
HXLINE(  71)			model->end = ::hx::TCast<  ::maglev::MagLevNumber >::cast(resobj->get(HX_("end",db,03,4d,00)))->getInt();
HXLINE(  72)			model->startingPrice = ::hx::TCast<  ::maglev::MagLevNumber >::cast(resobj->get(HX_("startingPrice",a9,64,6e,09)))->getFloat();
HXLINE(  73)			model->reservePrice = ::hx::TCast<  ::maglev::MagLevNumber >::cast(resobj->get(HX_("reservePrice",ad,26,d1,1a)))->getFloat();
HXLINE(  74)			model->priceIncrement = ::hx::TCast<  ::maglev::MagLevNumber >::cast(resobj->get(HX_("priceIncrement",66,fe,46,ba)))->getFloat();
HXLINE(  75)			auctions->push(model);
HXLINE(  76)			i = (i + 1);
            		}
HXLINE(  78)		return auctions;
            	}


HX_DEFINE_DYNAMIC_FUNC6(AuctionRepository_obj,FindAuctionsEnding,return )

::Array< ::Dynamic> AuctionRepository_obj::FindAuctionsStarting(int startfrom,int startto,int page,int perpage,::String sort,bool asc){
            	HX_GC_STACKFRAME(&_hx_pos_2c69b47eb41d373d_81_FindAuctionsStarting)
HXLINE(  82)		::Array< ::Dynamic> auctions = ::Array_obj< ::Dynamic>::__new();
HXLINE(  83)		 ::maglev::MagLevArray myargs = ::maglev::MagLevArray_obj::create();
HXLINE(  84)		myargs->push(::maglev::MagLevString_obj::fromString(HX_("EnglishAuction.Auction",c8,f3,cc,ba)));
HXLINE(  85)		myargs->push(::maglev::MagLevString_obj::fromString(HX_("FindStarting",39,3b,3c,f8)));
HXLINE(  86)		 ::maglev::MagLevArray myargs2 = ::maglev::MagLevArray_obj::create();
HXLINE(  87)		myargs2->push(::maglev::MagLevNumber_obj::fromInt(startfrom));
HXLINE(  88)		myargs2->push(::maglev::MagLevNumber_obj::fromInt(startto));
HXLINE(  89)		myargs2->push(::maglev::MagLevNumber_obj::fromInt(page));
HXLINE(  90)		myargs2->push(::maglev::MagLevNumber_obj::fromInt(perpage));
HXLINE(  91)		myargs2->push(::maglev::MagLevString_obj::fromString(sort));
HXLINE(  92)		myargs2->push(::maglev::MagLevBoolean_obj::fromBool(asc));
HXLINE(  93)		myargs->push(myargs2);
HXLINE(  94)		 ::maglev::MagLevResult res = this->bus->call(HX_("Persistence.Get",c7,c3,56,12),myargs);
HXLINE(  95)		 ::maglev::MagLevArray arr = ::hx::TCast<  ::maglev::MagLevArray >::cast(res->getResult());
HXLINE(  96)		int i = 0;
HXLINE(  97)		while((i < arr->size())){
HXLINE(  98)			 ::englishauction::AuctionModel model =  ::englishauction::AuctionModel_obj::__alloc( HX_CTX );
HXLINE(  99)			 ::maglev::MagLevObject resobj = ::hx::TCast<  ::maglev::MagLevObject >::cast(arr->get(i));
HXLINE( 100)			model->id = ::hx::TCast<  ::maglev::MagLevString >::cast(resobj->get(HX_("auctionId",fe,08,7f,46)))->getString();
HXLINE( 101)			model->start = ::hx::TCast<  ::maglev::MagLevNumber >::cast(resobj->get(HX_("start",62,74,0b,84)))->getInt();
HXLINE( 102)			model->end = ::hx::TCast<  ::maglev::MagLevNumber >::cast(resobj->get(HX_("end",db,03,4d,00)))->getInt();
HXLINE( 103)			model->startingPrice = ::hx::TCast<  ::maglev::MagLevNumber >::cast(resobj->get(HX_("startingPrice",a9,64,6e,09)))->getFloat();
HXLINE( 104)			model->reservePrice = ::hx::TCast<  ::maglev::MagLevNumber >::cast(resobj->get(HX_("reservePrice",ad,26,d1,1a)))->getFloat();
HXLINE( 105)			model->priceIncrement = ::hx::TCast<  ::maglev::MagLevNumber >::cast(resobj->get(HX_("priceIncrement",66,fe,46,ba)))->getFloat();
HXLINE( 106)			auctions->push(model);
HXLINE( 107)			i = (i + 1);
            		}
HXLINE( 109)		return auctions;
            	}


HX_DEFINE_DYNAMIC_FUNC6(AuctionRepository_obj,FindAuctionsStarting,return )

::Array< ::Dynamic> AuctionRepository_obj::FindOpenAuctions(int page,int perpage,::String sort,bool asc){
            	HX_GC_STACKFRAME(&_hx_pos_2c69b47eb41d373d_112_FindOpenAuctions)
HXLINE( 113)		::Array< ::Dynamic> auctions = ::Array_obj< ::Dynamic>::__new();
HXLINE( 114)		 ::maglev::MagLevArray myargs = ::maglev::MagLevArray_obj::create();
HXLINE( 115)		myargs->push(::maglev::MagLevString_obj::fromString(HX_("EnglishAuction.Auction",c8,f3,cc,ba)));
HXLINE( 116)		myargs->push(::maglev::MagLevString_obj::fromString(HX_("FindOpen",c3,cc,f9,75)));
HXLINE( 117)		 ::maglev::MagLevArray myargs2 = ::maglev::MagLevArray_obj::create();
HXLINE( 118)		myargs2->push(::maglev::MagLevNumber_obj::fromInt(page));
HXLINE( 119)		myargs2->push(::maglev::MagLevNumber_obj::fromInt(perpage));
HXLINE( 120)		myargs2->push(::maglev::MagLevString_obj::fromString(sort));
HXLINE( 121)		myargs2->push(::maglev::MagLevBoolean_obj::fromBool(asc));
HXLINE( 122)		myargs->push(myargs2);
HXLINE( 123)		 ::maglev::MagLevResult res = this->bus->call(HX_("Persistence.Get",c7,c3,56,12),myargs);
HXLINE( 124)		 ::maglev::MagLevArray arr = ::hx::TCast<  ::maglev::MagLevArray >::cast(res->getResult());
HXLINE( 125)		int i = 0;
HXLINE( 126)		while((i < arr->size())){
HXLINE( 127)			 ::englishauction::AuctionModel model =  ::englishauction::AuctionModel_obj::__alloc( HX_CTX );
HXLINE( 128)			 ::maglev::MagLevObject resobj = ::hx::TCast<  ::maglev::MagLevObject >::cast(arr->get(i));
HXLINE( 129)			model->id = ::hx::TCast<  ::maglev::MagLevString >::cast(resobj->get(HX_("auctionId",fe,08,7f,46)))->getString();
HXLINE( 130)			model->start = ::hx::TCast<  ::maglev::MagLevNumber >::cast(resobj->get(HX_("start",62,74,0b,84)))->getInt();
HXLINE( 131)			model->end = ::hx::TCast<  ::maglev::MagLevNumber >::cast(resobj->get(HX_("end",db,03,4d,00)))->getInt();
HXLINE( 132)			model->startingPrice = ::hx::TCast<  ::maglev::MagLevNumber >::cast(resobj->get(HX_("startingPrice",a9,64,6e,09)))->getFloat();
HXLINE( 133)			model->reservePrice = ::hx::TCast<  ::maglev::MagLevNumber >::cast(resobj->get(HX_("reservePrice",ad,26,d1,1a)))->getFloat();
HXLINE( 134)			model->priceIncrement = ::hx::TCast<  ::maglev::MagLevNumber >::cast(resobj->get(HX_("priceIncrement",66,fe,46,ba)))->getFloat();
HXLINE( 135)			auctions->push(model);
HXLINE( 136)			i = (i + 1);
            		}
HXLINE( 138)		return auctions;
            	}


HX_DEFINE_DYNAMIC_FUNC4(AuctionRepository_obj,FindOpenAuctions,return )


::hx::ObjectPtr< AuctionRepository_obj > AuctionRepository_obj::__new( ::maglev::MagLev bus) {
	::hx::ObjectPtr< AuctionRepository_obj > __this = new AuctionRepository_obj();
	__this->__construct(bus);
	return __this;
}

::hx::ObjectPtr< AuctionRepository_obj > AuctionRepository_obj::__alloc(::hx::Ctx *_hx_ctx, ::maglev::MagLev bus) {
	AuctionRepository_obj *__this = (AuctionRepository_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(AuctionRepository_obj), true, "englishauction.AuctionRepository"));
	*(void **)__this = AuctionRepository_obj::_hx_vtable;
	__this->__construct(bus);
	return __this;
}

AuctionRepository_obj::AuctionRepository_obj()
{
}

void AuctionRepository_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AuctionRepository);
	HX_MARK_MEMBER_NAME(bus,"bus");
	HX_MARK_END_CLASS();
}

void AuctionRepository_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bus,"bus");
}

::hx::Val AuctionRepository_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"bus") ) { return ::hx::Val( bus ); }
		if (HX_FIELD_EQ(inName,"Add") ) { return ::hx::Val( Add_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"Edit") ) { return ::hx::Val( Edit_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"Remove") ) { return ::hx::Val( Remove_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"FindById") ) { return ::hx::Val( FindById_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"FindOpenAuctions") ) { return ::hx::Val( FindOpenAuctions_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"FindAuctionsEnding") ) { return ::hx::Val( FindAuctionsEnding_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"FindAuctionsStarting") ) { return ::hx::Val( FindAuctionsStarting_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val AuctionRepository_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"bus") ) { bus=inValue.Cast<  ::maglev::MagLev >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AuctionRepository_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("bus",40,c3,4a,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo AuctionRepository_obj_sMemberStorageInfo[] = {
	{::hx::fsUnknown /*  ::maglev::MagLev */ ,(int)offsetof(AuctionRepository_obj,bus),HX_("bus",40,c3,4a,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *AuctionRepository_obj_sStaticStorageInfo = 0;
#endif

static ::String AuctionRepository_obj_sMemberFields[] = {
	HX_("bus",40,c3,4a,00),
	HX_("Add",01,aa,31,00),
	HX_("Edit",2a,f6,e7,2d),
	HX_("Remove",64,10,1d,39),
	HX_("FindById",8b,c2,68,6d),
	HX_("FindAuctionsEnding",10,37,42,6d),
	HX_("FindAuctionsStarting",29,71,4f,05),
	HX_("FindOpenAuctions",b3,0c,33,d1),
	::String(null()) };

::hx::Class AuctionRepository_obj::__mClass;

void AuctionRepository_obj::__register()
{
	AuctionRepository_obj _hx_dummy;
	AuctionRepository_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("englishauction.AuctionRepository",72,c5,70,27);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(AuctionRepository_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< AuctionRepository_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AuctionRepository_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AuctionRepository_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace englishauction
