// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_englishauction_AuctionModel
#include <englishauction/AuctionModel.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f9e3deea883a82ba_5_new,"englishauction.AuctionModel","new",0xb290bc33,"englishauction.AuctionModel.new","englishauction/AuctionModel.hx",5,0x160d33bc)
namespace englishauction{

void AuctionModel_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_f9e3deea883a82ba_5_new)
            	}

Dynamic AuctionModel_obj::__CreateEmpty() { return new AuctionModel_obj; }

void *AuctionModel_obj::_hx_vtable = 0;

Dynamic AuctionModel_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AuctionModel_obj > _hx_result = new AuctionModel_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool AuctionModel_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0621ba85;
}


AuctionModel_obj::AuctionModel_obj()
{
}

void AuctionModel_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AuctionModel);
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(start,"start");
	HX_MARK_MEMBER_NAME(end,"end");
	HX_MARK_MEMBER_NAME(startingPrice,"startingPrice");
	HX_MARK_MEMBER_NAME(reservePrice,"reservePrice");
	HX_MARK_MEMBER_NAME(priceIncrement,"priceIncrement");
	HX_MARK_END_CLASS();
}

void AuctionModel_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(start,"start");
	HX_VISIT_MEMBER_NAME(end,"end");
	HX_VISIT_MEMBER_NAME(startingPrice,"startingPrice");
	HX_VISIT_MEMBER_NAME(reservePrice,"reservePrice");
	HX_VISIT_MEMBER_NAME(priceIncrement,"priceIncrement");
}

::hx::Val AuctionModel_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return ::hx::Val( id ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { return ::hx::Val( end ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { return ::hx::Val( start ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"reservePrice") ) { return ::hx::Val( reservePrice ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"startingPrice") ) { return ::hx::Val( startingPrice ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"priceIncrement") ) { return ::hx::Val( priceIncrement ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val AuctionModel_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { end=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { start=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"reservePrice") ) { reservePrice=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"startingPrice") ) { startingPrice=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"priceIncrement") ) { priceIncrement=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AuctionModel_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("id",db,5b,00,00));
	outFields->push(HX_("start",62,74,0b,84));
	outFields->push(HX_("end",db,03,4d,00));
	outFields->push(HX_("startingPrice",a9,64,6e,09));
	outFields->push(HX_("reservePrice",ad,26,d1,1a));
	outFields->push(HX_("priceIncrement",66,fe,46,ba));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo AuctionModel_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(AuctionModel_obj,id),HX_("id",db,5b,00,00)},
	{::hx::fsInt,(int)offsetof(AuctionModel_obj,start),HX_("start",62,74,0b,84)},
	{::hx::fsInt,(int)offsetof(AuctionModel_obj,end),HX_("end",db,03,4d,00)},
	{::hx::fsFloat,(int)offsetof(AuctionModel_obj,startingPrice),HX_("startingPrice",a9,64,6e,09)},
	{::hx::fsFloat,(int)offsetof(AuctionModel_obj,reservePrice),HX_("reservePrice",ad,26,d1,1a)},
	{::hx::fsFloat,(int)offsetof(AuctionModel_obj,priceIncrement),HX_("priceIncrement",66,fe,46,ba)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *AuctionModel_obj_sStaticStorageInfo = 0;
#endif

static ::String AuctionModel_obj_sMemberFields[] = {
	HX_("id",db,5b,00,00),
	HX_("start",62,74,0b,84),
	HX_("end",db,03,4d,00),
	HX_("startingPrice",a9,64,6e,09),
	HX_("reservePrice",ad,26,d1,1a),
	HX_("priceIncrement",66,fe,46,ba),
	::String(null()) };

::hx::Class AuctionModel_obj::__mClass;

void AuctionModel_obj::__register()
{
	AuctionModel_obj _hx_dummy;
	AuctionModel_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("englishauction.AuctionModel",c1,26,74,6f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(AuctionModel_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< AuctionModel_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AuctionModel_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AuctionModel_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace englishauction
