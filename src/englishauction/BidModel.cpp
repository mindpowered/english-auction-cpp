// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_englishauction_BidModel
#include <englishauction/BidModel.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c3f119f07bcfb584_5_new,"englishauction.BidModel","new",0xe7530cf9,"englishauction.BidModel.new","englishauction/BidModel.hx",5,0x6af6e236)
namespace englishauction{

void BidModel_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_c3f119f07bcfb584_5_new)
            	}

Dynamic BidModel_obj::__CreateEmpty() { return new BidModel_obj; }

void *BidModel_obj::_hx_vtable = 0;

Dynamic BidModel_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BidModel_obj > _hx_result = new BidModel_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BidModel_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2232b61f;
}


BidModel_obj::BidModel_obj()
{
}

void BidModel_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BidModel);
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(auctionId,"auctionId");
	HX_MARK_MEMBER_NAME(userId,"userId");
	HX_MARK_MEMBER_NAME(amount,"amount");
	HX_MARK_END_CLASS();
}

void BidModel_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(auctionId,"auctionId");
	HX_VISIT_MEMBER_NAME(userId,"userId");
	HX_VISIT_MEMBER_NAME(amount,"amount");
}

::hx::Val BidModel_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return ::hx::Val( id ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"userId") ) { return ::hx::Val( userId ); }
		if (HX_FIELD_EQ(inName,"amount") ) { return ::hx::Val( amount ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"auctionId") ) { return ::hx::Val( auctionId ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val BidModel_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"userId") ) { userId=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"amount") ) { amount=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"auctionId") ) { auctionId=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BidModel_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("id",db,5b,00,00));
	outFields->push(HX_("auctionId",fe,08,7f,46));
	outFields->push(HX_("userId",06,3b,ef,41));
	outFields->push(HX_("amount",d8,11,03,d5));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BidModel_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(BidModel_obj,id),HX_("id",db,5b,00,00)},
	{::hx::fsString,(int)offsetof(BidModel_obj,auctionId),HX_("auctionId",fe,08,7f,46)},
	{::hx::fsString,(int)offsetof(BidModel_obj,userId),HX_("userId",06,3b,ef,41)},
	{::hx::fsFloat,(int)offsetof(BidModel_obj,amount),HX_("amount",d8,11,03,d5)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *BidModel_obj_sStaticStorageInfo = 0;
#endif

static ::String BidModel_obj_sMemberFields[] = {
	HX_("id",db,5b,00,00),
	HX_("auctionId",fe,08,7f,46),
	HX_("userId",06,3b,ef,41),
	HX_("amount",d8,11,03,d5),
	::String(null()) };

::hx::Class BidModel_obj::__mClass;

void BidModel_obj::__register()
{
	BidModel_obj _hx_dummy;
	BidModel_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("englishauction.BidModel",87,1c,c1,e0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BidModel_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BidModel_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BidModel_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BidModel_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace englishauction
